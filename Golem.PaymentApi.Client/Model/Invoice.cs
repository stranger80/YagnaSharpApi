/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.PaymentApi.Client.Model
{
    /// <summary>
    /// An Invoice is an artifact issued by the Provider to the Requestor, in the context of a specific Agreement. It indicates the total Amount owed by the Requestor in this Agreement. No further Debit Notes shall be issued after the Invoice is issued. The issue of Invoice signals the Termination of the Agreement (if it hasn&#39;t been terminated already). No Activity execution is allowed after the Invoice is issued.  NOTE: An invoice can be issued even before any Activity is started in the context of an Agreement (eg. in one off, &#39;fire-and-forget&#39; payment regime). 
    /// </summary>
    [DataContract]
    public partial class Invoice :  IEquatable<Invoice>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public InvoiceStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Invoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="agreementId">agreementId (required).</param>
        /// <param name="activityIds">activityIds.</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="paymentDueDate">paymentDueDate (required).</param>
        /// <param name="status">status.</param>
        public Invoice(string agreementId = default(string), List<string> activityIds = default(List<string>), string amount = default(string), DateTime paymentDueDate = default(DateTime), InvoiceStatus status = default(InvoiceStatus))
        {
            // to ensure "agreementId" is required (not null)
            this.AgreementId = agreementId ?? throw new ArgumentNullException("agreementId is a required property for Invoice and cannot be null");;
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount is a required property for Invoice and cannot be null");;
            this.PaymentDueDate = paymentDueDate;
            this.ActivityIds = activityIds;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets InvoiceId
        /// </summary>
        [DataMember(Name="invoiceId", EmitDefaultValue=false)]
        public string InvoiceId { get; private set; }

        /// <summary>
        /// Gets or Sets IssuerId
        /// </summary>
        [DataMember(Name="issuerId", EmitDefaultValue=false)]
        public string IssuerId { get; private set; }

        /// <summary>
        /// Gets or Sets RecipientId
        /// </summary>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; private set; }

        /// <summary>
        /// Gets or Sets PayeeAddr
        /// </summary>
        [DataMember(Name="payeeAddr", EmitDefaultValue=false)]
        public string PayeeAddr { get; private set; }

        /// <summary>
        /// Gets or Sets PayerAddr
        /// </summary>
        [DataMember(Name="payerAddr", EmitDefaultValue=false)]
        public string PayerAddr { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentPlatform
        /// </summary>
        [DataMember(Name="paymentPlatform", EmitDefaultValue=false)]
        public string PaymentPlatform { get; private set; }

        /// <summary>
        /// Gets or Sets LastDebitNoteId
        /// </summary>
        [DataMember(Name="lastDebitNoteId", EmitDefaultValue=false)]
        public string LastDebitNoteId { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; private set; }

        /// <summary>
        /// Gets or Sets AgreementId
        /// </summary>
        [DataMember(Name="agreementId", EmitDefaultValue=false)]
        public string AgreementId { get; set; }

        /// <summary>
        /// Gets or Sets ActivityIds
        /// </summary>
        [DataMember(Name="activityIds", EmitDefaultValue=false)]
        public List<string> ActivityIds { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDueDate
        /// </summary>
        [DataMember(Name="paymentDueDate", EmitDefaultValue=false)]
        public DateTime PaymentDueDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  PayeeAddr: ").Append(PayeeAddr).Append("\n");
            sb.Append("  PayerAddr: ").Append(PayerAddr).Append("\n");
            sb.Append("  PaymentPlatform: ").Append(PaymentPlatform).Append("\n");
            sb.Append("  LastDebitNoteId: ").Append(LastDebitNoteId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  ActivityIds: ").Append(ActivityIds).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="input">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.RecipientId == input.RecipientId ||
                    (this.RecipientId != null &&
                    this.RecipientId.Equals(input.RecipientId))
                ) && 
                (
                    this.PayeeAddr == input.PayeeAddr ||
                    (this.PayeeAddr != null &&
                    this.PayeeAddr.Equals(input.PayeeAddr))
                ) && 
                (
                    this.PayerAddr == input.PayerAddr ||
                    (this.PayerAddr != null &&
                    this.PayerAddr.Equals(input.PayerAddr))
                ) && 
                (
                    this.PaymentPlatform == input.PaymentPlatform ||
                    (this.PaymentPlatform != null &&
                    this.PaymentPlatform.Equals(input.PaymentPlatform))
                ) && 
                (
                    this.LastDebitNoteId == input.LastDebitNoteId ||
                    (this.LastDebitNoteId != null &&
                    this.LastDebitNoteId.Equals(input.LastDebitNoteId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.ActivityIds == input.ActivityIds ||
                    this.ActivityIds != null &&
                    input.ActivityIds != null &&
                    this.ActivityIds.SequenceEqual(input.ActivityIds)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceId != null)
                    hashCode = hashCode * 59 + this.InvoiceId.GetHashCode();
                if (this.IssuerId != null)
                    hashCode = hashCode * 59 + this.IssuerId.GetHashCode();
                if (this.RecipientId != null)
                    hashCode = hashCode * 59 + this.RecipientId.GetHashCode();
                if (this.PayeeAddr != null)
                    hashCode = hashCode * 59 + this.PayeeAddr.GetHashCode();
                if (this.PayerAddr != null)
                    hashCode = hashCode * 59 + this.PayerAddr.GetHashCode();
                if (this.PaymentPlatform != null)
                    hashCode = hashCode * 59 + this.PaymentPlatform.GetHashCode();
                if (this.LastDebitNoteId != null)
                    hashCode = hashCode * 59 + this.LastDebitNoteId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.AgreementId != null)
                    hashCode = hashCode * 59 + this.AgreementId.GetHashCode();
                if (this.ActivityIds != null)
                    hashCode = hashCode * 59 + this.ActivityIds.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.PaymentApi.Client.Model
{
    /// <summary>
    /// A Debit Note is an artifact issued by the Provider to the Requestor, in the context of a specific Agreement. It is a notification of Total Amount Due incurred by Activities in this Agreement until the moment the Debit Note is issued. This is expected to be used as trigger for payment in upfront-payment or pay-as-you-go scenarios.  NOTE: Debit Notes flag the current Total Amount Due, which is accumulated from the start of Agreement. Debit Notes are expected to trigger payments, therefore payment amount for the newly received Debit Note is expected to be determined by difference of Total Payments for the Agreement vs Total Amount Due. 
    /// </summary>
    [DataContract]
    public partial class DebitNote :  IEquatable<DebitNote>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public InvoiceStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebitNote" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DebitNote() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebitNote" /> class.
        /// </summary>
        /// <param name="activityId">activityId (required).</param>
        /// <param name="totalAmountDue">totalAmountDue (required).</param>
        /// <param name="usageCounterVector">usageCounterVector.</param>
        /// <param name="paymentDueDate">paymentDueDate.</param>
        /// <param name="status">status (required).</param>
        public DebitNote(string activityId = default(string), string totalAmountDue = default(string), Object usageCounterVector = default(Object), DateTime paymentDueDate = default(DateTime), InvoiceStatus status = default(InvoiceStatus))
        {
            // to ensure "activityId" is required (not null)
            this.ActivityId = activityId ?? throw new ArgumentNullException("activityId is a required property for DebitNote and cannot be null");;
            // to ensure "totalAmountDue" is required (not null)
            this.TotalAmountDue = totalAmountDue ?? throw new ArgumentNullException("totalAmountDue is a required property for DebitNote and cannot be null");;
            // to ensure "status" is required (not null)
            this.Status = status;
            this.UsageCounterVector = usageCounterVector;
            this.PaymentDueDate = paymentDueDate;
        }
        
        /// <summary>
        /// Gets or Sets DebitNoteId
        /// </summary>
        [DataMember(Name="debitNoteId", EmitDefaultValue=false)]
        public string DebitNoteId { get; private set; }

        /// <summary>
        /// Gets or Sets IssuerId
        /// </summary>
        [DataMember(Name="issuerId", EmitDefaultValue=false)]
        public string IssuerId { get; private set; }

        /// <summary>
        /// Gets or Sets RecipientId
        /// </summary>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; private set; }

        /// <summary>
        /// Gets or Sets PayeeAddr
        /// </summary>
        [DataMember(Name="payeeAddr", EmitDefaultValue=false)]
        public string PayeeAddr { get; private set; }

        /// <summary>
        /// Gets or Sets PayerAddr
        /// </summary>
        [DataMember(Name="payerAddr", EmitDefaultValue=false)]
        public string PayerAddr { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentPlatform
        /// </summary>
        [DataMember(Name="paymentPlatform", EmitDefaultValue=false)]
        public string PaymentPlatform { get; private set; }

        /// <summary>
        /// Gets or Sets PreviousDebitNoteId
        /// </summary>
        [DataMember(Name="previousDebitNoteId", EmitDefaultValue=false)]
        public string PreviousDebitNoteId { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; private set; }

        /// <summary>
        /// Gets or Sets AgreementId
        /// </summary>
        [DataMember(Name="agreementId", EmitDefaultValue=false)]
        public string AgreementId { get; private set; }

        /// <summary>
        /// Gets or Sets ActivityId
        /// </summary>
        [DataMember(Name="activityId", EmitDefaultValue=false)]
        public string ActivityId { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmountDue
        /// </summary>
        [DataMember(Name="totalAmountDue", EmitDefaultValue=false)]
        public string TotalAmountDue { get; set; }

        /// <summary>
        /// Gets or Sets UsageCounterVector
        /// </summary>
        [DataMember(Name="usageCounterVector", EmitDefaultValue=false)]
        public Object UsageCounterVector { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDueDate
        /// </summary>
        [DataMember(Name="paymentDueDate", EmitDefaultValue=false)]
        public DateTime PaymentDueDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DebitNote {\n");
            sb.Append("  DebitNoteId: ").Append(DebitNoteId).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  PayeeAddr: ").Append(PayeeAddr).Append("\n");
            sb.Append("  PayerAddr: ").Append(PayerAddr).Append("\n");
            sb.Append("  PaymentPlatform: ").Append(PaymentPlatform).Append("\n");
            sb.Append("  PreviousDebitNoteId: ").Append(PreviousDebitNoteId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  TotalAmountDue: ").Append(TotalAmountDue).Append("\n");
            sb.Append("  UsageCounterVector: ").Append(UsageCounterVector).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebitNote);
        }

        /// <summary>
        /// Returns true if DebitNote instances are equal
        /// </summary>
        /// <param name="input">Instance of DebitNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebitNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DebitNoteId == input.DebitNoteId ||
                    (this.DebitNoteId != null &&
                    this.DebitNoteId.Equals(input.DebitNoteId))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.RecipientId == input.RecipientId ||
                    (this.RecipientId != null &&
                    this.RecipientId.Equals(input.RecipientId))
                ) && 
                (
                    this.PayeeAddr == input.PayeeAddr ||
                    (this.PayeeAddr != null &&
                    this.PayeeAddr.Equals(input.PayeeAddr))
                ) && 
                (
                    this.PayerAddr == input.PayerAddr ||
                    (this.PayerAddr != null &&
                    this.PayerAddr.Equals(input.PayerAddr))
                ) && 
                (
                    this.PaymentPlatform == input.PaymentPlatform ||
                    (this.PaymentPlatform != null &&
                    this.PaymentPlatform.Equals(input.PaymentPlatform))
                ) && 
                (
                    this.PreviousDebitNoteId == input.PreviousDebitNoteId ||
                    (this.PreviousDebitNoteId != null &&
                    this.PreviousDebitNoteId.Equals(input.PreviousDebitNoteId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.TotalAmountDue == input.TotalAmountDue ||
                    (this.TotalAmountDue != null &&
                    this.TotalAmountDue.Equals(input.TotalAmountDue))
                ) && 
                (
                    this.UsageCounterVector == input.UsageCounterVector ||
                    (this.UsageCounterVector != null &&
                    this.UsageCounterVector.Equals(input.UsageCounterVector))
                ) && 
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DebitNoteId != null)
                    hashCode = hashCode * 59 + this.DebitNoteId.GetHashCode();
                if (this.IssuerId != null)
                    hashCode = hashCode * 59 + this.IssuerId.GetHashCode();
                if (this.RecipientId != null)
                    hashCode = hashCode * 59 + this.RecipientId.GetHashCode();
                if (this.PayeeAddr != null)
                    hashCode = hashCode * 59 + this.PayeeAddr.GetHashCode();
                if (this.PayerAddr != null)
                    hashCode = hashCode * 59 + this.PayerAddr.GetHashCode();
                if (this.PaymentPlatform != null)
                    hashCode = hashCode * 59 + this.PaymentPlatform.GetHashCode();
                if (this.PreviousDebitNoteId != null)
                    hashCode = hashCode * 59 + this.PreviousDebitNoteId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.AgreementId != null)
                    hashCode = hashCode * 59 + this.AgreementId.GetHashCode();
                if (this.ActivityId != null)
                    hashCode = hashCode * 59 + this.ActivityId.GetHashCode();
                if (this.TotalAmountDue != null)
                    hashCode = hashCode * 59 + this.TotalAmountDue.GetHashCode();
                if (this.UsageCounterVector != null)
                    hashCode = hashCode * 59 + this.UsageCounterVector.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.PaymentApi.Client.Model
{
    /// <summary>
    /// ADD DESCRIPTION
    /// </summary>
    [DataContract]
    public partial class Payment :  IEquatable<Payment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Payment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="paymentId">paymentId (required).</param>
        /// <param name="payerId">payerId (required).</param>
        /// <param name="payeeId">payeeId (required).</param>
        /// <param name="payerAddr">payerAddr (required).</param>
        /// <param name="payeeAddr">payeeAddr (required).</param>
        /// <param name="paymentPlatform">paymentPlatform (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="agreementPayments">agreementPayments (required).</param>
        /// <param name="activityPayments">activityPayments (required).</param>
        /// <param name="details">details (required).</param>
        public Payment(string paymentId = default(string), string payerId = default(string), string payeeId = default(string), string payerAddr = default(string), string payeeAddr = default(string), string paymentPlatform = default(string), string amount = default(string), DateTime timestamp = default(DateTime), List<AgreementPayment> agreementPayments = default(List<AgreementPayment>), List<ActivityPayment> activityPayments = default(List<ActivityPayment>), byte[] details = default(byte[]))
        {
            // to ensure "paymentId" is required (not null)
            this.PaymentId = paymentId ?? throw new ArgumentNullException("paymentId is a required property for Payment and cannot be null");;
            // to ensure "payerId" is required (not null)
            this.PayerId = payerId ?? throw new ArgumentNullException("payerId is a required property for Payment and cannot be null");;
            // to ensure "payeeId" is required (not null)
            this.PayeeId = payeeId ?? throw new ArgumentNullException("payeeId is a required property for Payment and cannot be null");;
            // to ensure "payerAddr" is required (not null)
            this.PayerAddr = payerAddr ?? throw new ArgumentNullException("payerAddr is a required property for Payment and cannot be null");;
            // to ensure "payeeAddr" is required (not null)
            this.PayeeAddr = payeeAddr ?? throw new ArgumentNullException("payeeAddr is a required property for Payment and cannot be null");;
            // to ensure "paymentPlatform" is required (not null)
            this.PaymentPlatform = paymentPlatform ?? throw new ArgumentNullException("paymentPlatform is a required property for Payment and cannot be null");;
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount is a required property for Payment and cannot be null");;
            this.Timestamp = timestamp;
            // to ensure "agreementPayments" is required (not null)
            this.AgreementPayments = agreementPayments ?? throw new ArgumentNullException("agreementPayments is a required property for Payment and cannot be null");;
            // to ensure "activityPayments" is required (not null)
            this.ActivityPayments = activityPayments ?? throw new ArgumentNullException("activityPayments is a required property for Payment and cannot be null");;
            // to ensure "details" is required (not null)
            this.Details = details ?? throw new ArgumentNullException("details is a required property for Payment and cannot be null");;
        }
        
        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name="paymentId", EmitDefaultValue=false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets PayerId
        /// </summary>
        [DataMember(Name="payerId", EmitDefaultValue=false)]
        public string PayerId { get; set; }

        /// <summary>
        /// Gets or Sets PayeeId
        /// </summary>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// Gets or Sets PayerAddr
        /// </summary>
        [DataMember(Name="payerAddr", EmitDefaultValue=false)]
        public string PayerAddr { get; set; }

        /// <summary>
        /// Gets or Sets PayeeAddr
        /// </summary>
        [DataMember(Name="payeeAddr", EmitDefaultValue=false)]
        public string PayeeAddr { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPlatform
        /// </summary>
        [DataMember(Name="paymentPlatform", EmitDefaultValue=false)]
        public string PaymentPlatform { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets AgreementPayments
        /// </summary>
        [DataMember(Name="agreementPayments", EmitDefaultValue=false)]
        public List<AgreementPayment> AgreementPayments { get; set; }

        /// <summary>
        /// Gets or Sets ActivityPayments
        /// </summary>
        [DataMember(Name="activityPayments", EmitDefaultValue=false)]
        public List<ActivityPayment> ActivityPayments { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public byte[] Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PayerId: ").Append(PayerId).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  PayerAddr: ").Append(PayerAddr).Append("\n");
            sb.Append("  PayeeAddr: ").Append(PayeeAddr).Append("\n");
            sb.Append("  PaymentPlatform: ").Append(PaymentPlatform).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AgreementPayments: ").Append(AgreementPayments).Append("\n");
            sb.Append("  ActivityPayments: ").Append(ActivityPayments).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="input">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.PayerId == input.PayerId ||
                    (this.PayerId != null &&
                    this.PayerId.Equals(input.PayerId))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.PayerAddr == input.PayerAddr ||
                    (this.PayerAddr != null &&
                    this.PayerAddr.Equals(input.PayerAddr))
                ) && 
                (
                    this.PayeeAddr == input.PayeeAddr ||
                    (this.PayeeAddr != null &&
                    this.PayeeAddr.Equals(input.PayeeAddr))
                ) && 
                (
                    this.PaymentPlatform == input.PaymentPlatform ||
                    (this.PaymentPlatform != null &&
                    this.PaymentPlatform.Equals(input.PaymentPlatform))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.AgreementPayments == input.AgreementPayments ||
                    this.AgreementPayments != null &&
                    input.AgreementPayments != null &&
                    this.AgreementPayments.SequenceEqual(input.AgreementPayments)
                ) && 
                (
                    this.ActivityPayments == input.ActivityPayments ||
                    this.ActivityPayments != null &&
                    input.ActivityPayments != null &&
                    this.ActivityPayments.SequenceEqual(input.ActivityPayments)
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentId != null)
                    hashCode = hashCode * 59 + this.PaymentId.GetHashCode();
                if (this.PayerId != null)
                    hashCode = hashCode * 59 + this.PayerId.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.PayerAddr != null)
                    hashCode = hashCode * 59 + this.PayerAddr.GetHashCode();
                if (this.PayeeAddr != null)
                    hashCode = hashCode * 59 + this.PayeeAddr.GetHashCode();
                if (this.PaymentPlatform != null)
                    hashCode = hashCode * 59 + this.PaymentPlatform.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.AgreementPayments != null)
                    hashCode = hashCode * 59 + this.AgreementPayments.GetHashCode();
                if (this.ActivityPayments != null)
                    hashCode = hashCode * 59 + this.ActivityPayments.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

    }

}

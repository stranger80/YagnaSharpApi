/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using Golem.Common.Client.Client;
using Golem.PaymentApi.Client.Model;

namespace Golem.PaymentApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void AcceptDebitNote (string debitNoteId, Acceptance acceptance, float? timeout = default(float?));

        /// <summary>
        /// Accept received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AcceptDebitNoteWithHttpInfo (string debitNoteId, Acceptance acceptance, float? timeout = default(float?));
        /// <summary>
        /// Accept received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void AcceptInvoice (string invoiceId, Acceptance acceptance, float? timeout = default(float?));

        /// <summary>
        /// Accept received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AcceptInvoiceWithHttpInfo (string invoiceId, Acceptance acceptance, float? timeout = default(float?));
        /// <summary>
        /// Amend Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>Allocation</returns>
        Allocation AmendAllocation (string allocationId, Allocation allocation);

        /// <summary>
        /// Amend Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> AmendAllocationWithHttpInfo (string allocationId, Allocation allocation);
        /// <summary>
        /// Create Allocation.
        /// </summary>
        /// <remarks>
        /// Allocate funds to make sure they are not spent elsewhere.
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Allocation</returns>
        Allocation CreateAllocation (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Create Allocation.
        /// </summary>
        /// <remarks>
        /// Allocate funds to make sure they are not spent elsewhere.
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> CreateAllocationWithHttpInfo (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Allocation</returns>
        Allocation GetAllocation (string allocationId);

        /// <summary>
        /// Get Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> GetAllocationWithHttpInfo (string allocationId);
        /// <summary>
        /// Get Allocations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Allocation&gt;</returns>
        List<Allocation> GetAllocations ();

        /// <summary>
        /// Get Allocations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Allocation&gt;</returns>
        ApiResponse<List<Allocation>> GetAllocationsWithHttpInfo ();
        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>DebitNote</returns>
        DebitNote GetDebitNote (string debitNoteId);

        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>ApiResponse of DebitNote</returns>
        ApiResponse<DebitNote> GetDebitNoteWithHttpInfo (string debitNoteId);
        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;DebitNoteEvent&gt;</returns>
        List<DebitNoteEvent> GetDebitNoteEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;DebitNoteEvent&gt;</returns>
        ApiResponse<List<DebitNoteEvent>> GetDebitNoteEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;DebitNote&gt;</returns>
        List<DebitNote> GetDebitNotes (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;DebitNote&gt;</returns>
        ApiResponse<List<DebitNote>> GetDebitNotesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
        /// </summary>
        /// <remarks>
        /// Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>MarketDecoration</returns>
        MarketDecoration GetDemandDecorations (List<string> allocationIds);

        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
        /// </summary>
        /// <remarks>
        /// Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>ApiResponse of MarketDecoration</returns>
        ApiResponse<MarketDecoration> GetDemandDecorationsWithHttpInfo (List<string> allocationIds);
        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Invoice</returns>
        Invoice GetInvoice (string invoiceId);

        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> GetInvoiceWithHttpInfo (string invoiceId);
        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;InvoiceEvent&gt;</returns>
        List<InvoiceEvent> GetInvoiceEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;InvoiceEvent&gt;</returns>
        ApiResponse<List<InvoiceEvent>> GetInvoiceEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Invoice&gt;</returns>
        List<Invoice> GetInvoices (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        ApiResponse<List<Invoice>> GetInvoicesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Payment</returns>
        Payment GetPayment (string paymentId);

        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GetPaymentWithHttpInfo (string paymentId);
        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GetPayments (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GetPaymentsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GetPaymentsForDebitNote (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GetPaymentsForDebitNoteWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GetPaymentsForInvoice (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GetPaymentsForInvoiceWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get available accounts for sending payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Account&gt;</returns>
        List<Account> GetRequestorAccounts ();

        /// <summary>
        /// Get available accounts for sending payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        ApiResponse<List<Account>> GetRequestorAccountsWithHttpInfo ();
        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Invoice</returns>
        Invoice IssueInvoice (Invoice invoice);

        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> IssueInvoiceWithHttpInfo (Invoice invoice);
        /// <summary>
        /// Reject received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void RejectDebitNote (string debitNoteId, Rejection rejection, float? timeout = default(float?));

        /// <summary>
        /// Reject received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RejectDebitNoteWithHttpInfo (string debitNoteId, Rejection rejection, float? timeout = default(float?));
        /// <summary>
        /// Reject received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void RejectInvoice (string invoiceId, Rejection rejection, float? timeout = default(float?));

        /// <summary>
        /// Reject received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RejectInvoiceWithHttpInfo (string invoiceId, Rejection rejection, float? timeout = default(float?));
        /// <summary>
        /// Release Allocation.
        /// </summary>
        /// <remarks>
        /// The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns></returns>
        void ReleaseAllocation (string allocationId);

        /// <summary>
        /// Release Allocation.
        /// </summary>
        /// <remarks>
        /// The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReleaseAllocationWithHttpInfo (string allocationId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AcceptDebitNoteAsync (string debitNoteId, Acceptance acceptance, float? timeout = default(float?));

        /// <summary>
        /// Accept received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AcceptDebitNoteAsyncWithHttpInfo (string debitNoteId, Acceptance acceptance, float? timeout = default(float?));
        /// <summary>
        /// Accept received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AcceptInvoiceAsync (string invoiceId, Acceptance acceptance, float? timeout = default(float?));

        /// <summary>
        /// Accept received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AcceptInvoiceAsyncWithHttpInfo (string invoiceId, Acceptance acceptance, float? timeout = default(float?));
        /// <summary>
        /// Amend Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> AmendAllocationAsync (string allocationId, Allocation allocation);

        /// <summary>
        /// Amend Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> AmendAllocationAsyncWithHttpInfo (string allocationId, Allocation allocation);
        /// <summary>
        /// Create Allocation.
        /// </summary>
        /// <remarks>
        /// Allocate funds to make sure they are not spent elsewhere.
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> CreateAllocationAsync (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Create Allocation.
        /// </summary>
        /// <remarks>
        /// Allocate funds to make sure they are not spent elsewhere.
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> CreateAllocationAsyncWithHttpInfo (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> GetAllocationAsync (string allocationId);

        /// <summary>
        /// Get Allocation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> GetAllocationAsyncWithHttpInfo (string allocationId);
        /// <summary>
        /// Get Allocations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Allocation&gt;</returns>
        System.Threading.Tasks.Task<List<Allocation>> GetAllocationsAsync ();

        /// <summary>
        /// Get Allocations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Allocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Allocation>>> GetAllocationsAsyncWithHttpInfo ();
        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of DebitNote</returns>
        System.Threading.Tasks.Task<DebitNote> GetDebitNoteAsync (string debitNoteId);

        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of ApiResponse (DebitNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebitNote>> GetDebitNoteAsyncWithHttpInfo (string debitNoteId);
        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;DebitNoteEvent&gt;</returns>
        System.Threading.Tasks.Task<List<DebitNoteEvent>> GetDebitNoteEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken));

        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNoteEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DebitNoteEvent>>> GetDebitNoteEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken));
        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;DebitNote&gt;</returns>
        System.Threading.Tasks.Task<List<DebitNote>> GetDebitNotesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DebitNote>>> GetDebitNotesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
        /// </summary>
        /// <remarks>
        /// Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>Task of MarketDecoration</returns>
        System.Threading.Tasks.Task<MarketDecoration> GetDemandDecorationsAsync (List<string> allocationIds);

        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
        /// </summary>
        /// <remarks>
        /// Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>Task of ApiResponse (MarketDecoration)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketDecoration>> GetDemandDecorationsAsyncWithHttpInfo (List<string> allocationIds);
        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string invoiceId);

        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string invoiceId);
        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;InvoiceEvent&gt;</returns>
        System.Threading.Tasks.Task<List<InvoiceEvent>> GetInvoiceEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken));

        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvoiceEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvoiceEvent>>> GetInvoiceEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken));
        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        System.Threading.Tasks.Task<List<Invoice>> GetInvoicesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Invoice>>> GetInvoicesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GetPaymentAsync (string paymentId);

        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentAsyncWithHttpInfo (string paymentId);
        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GetPaymentsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GetPaymentsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GetPaymentsForDebitNoteAsync (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GetPaymentsForDebitNoteAsyncWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GetPaymentsForInvoiceAsync (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GetPaymentsForInvoiceAsyncWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get available accounts for sending payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Account&gt;</returns>
        System.Threading.Tasks.Task<List<Account>> GetRequestorAccountsAsync ();

        /// <summary>
        /// Get available accounts for sending payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Account>>> GetRequestorAccountsAsyncWithHttpInfo ();
        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> IssueInvoiceAsync (Invoice invoice);

        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> IssueInvoiceAsyncWithHttpInfo (Invoice invoice);
        /// <summary>
        /// Reject received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RejectDebitNoteAsync (string debitNoteId, Rejection rejection, float? timeout = default(float?));

        /// <summary>
        /// Reject received Debit Note.
        /// </summary>
        /// <remarks>
        /// Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectDebitNoteAsyncWithHttpInfo (string debitNoteId, Rejection rejection, float? timeout = default(float?));
        /// <summary>
        /// Reject received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RejectInvoiceAsync (string invoiceId, Rejection rejection, float? timeout = default(float?));

        /// <summary>
        /// Reject received Invoice.
        /// </summary>
        /// <remarks>
        /// Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectInvoiceAsyncWithHttpInfo (string invoiceId, Rejection rejection, float? timeout = default(float?));
        /// <summary>
        /// Release Allocation.
        /// </summary>
        /// <remarks>
        /// The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReleaseAllocationAsync (string allocationId);

        /// <summary>
        /// Release Allocation.
        /// </summary>
        /// <remarks>
        /// The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </remarks>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReleaseAllocationAsyncWithHttpInfo (string allocationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestorApi : IRequestorApiSync, IRequestorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RequestorApi : IRequestorApi
    {
        private Golem.Common.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestorApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestorApi(String basePath)
        {
            this.Configuration = Golem.Common.Client.Client.Configuration.MergeConfigurations(
                Golem.Common.Client.Client.GlobalConfiguration.Instance,
                new Golem.Common.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Golem.Common.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.Common.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Golem.Common.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RequestorApi(Golem.Common.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Golem.Common.Client.Client.Configuration.MergeConfigurations(
                Golem.Common.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Golem.Common.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.Common.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Golem.Common.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RequestorApi(Golem.Common.Client.Client.ISynchronousClient client,Golem.Common.Client.Client.IAsynchronousClient asyncClient, Golem.Common.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Golem.Common.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Golem.Common.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Golem.Common.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Golem.Common.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Golem.Common.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept received Debit Note. Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void AcceptDebitNote (string debitNoteId, Acceptance acceptance, float? timeout = default(float?))
        {
             AcceptDebitNoteWithHttpInfo(debitNoteId, acceptance, timeout);
        }

        /// <summary>
        /// Accept received Debit Note. Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.Common.Client.Client.ApiResponse<Object> AcceptDebitNoteWithHttpInfo (string debitNoteId, Acceptance acceptance, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->AcceptDebitNote");

            // verify the required parameter 'acceptance' is set
            if (acceptance == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'acceptance' when calling RequestorApi->AcceptDebitNote");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = acceptance;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/debitNotes/{debitNoteId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept received Debit Note. Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AcceptDebitNoteAsync (string debitNoteId, Acceptance acceptance, float? timeout = default(float?))
        {
             await AcceptDebitNoteAsyncWithHttpInfo(debitNoteId, acceptance, timeout);

        }

        /// <summary>
        /// Accept received Debit Note. Send Debit Note Accepted message to Debit Note Issuer. Trigger payment orchestration for this Debit Note (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.  NOTE: An Accepted Debit Note cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Object>> AcceptDebitNoteAsyncWithHttpInfo (string debitNoteId, Acceptance acceptance, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->AcceptDebitNote");

            // verify the required parameter 'acceptance' is set
            if (acceptance == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'acceptance' when calling RequestorApi->AcceptDebitNote");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = acceptance;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/debitNotes/{debitNoteId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept received Invoice. Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void AcceptInvoice (string invoiceId, Acceptance acceptance, float? timeout = default(float?))
        {
             AcceptInvoiceWithHttpInfo(invoiceId, acceptance, timeout);
        }

        /// <summary>
        /// Accept received Invoice. Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.Common.Client.Client.ApiResponse<Object> AcceptInvoiceWithHttpInfo (string invoiceId, Acceptance acceptance, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->AcceptInvoice");

            // verify the required parameter 'acceptance' is set
            if (acceptance == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'acceptance' when calling RequestorApi->AcceptInvoice");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = acceptance;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/invoices/{invoiceId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept received Invoice. Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AcceptInvoiceAsync (string invoiceId, Acceptance acceptance, float? timeout = default(float?))
        {
             await AcceptInvoiceAsyncWithHttpInfo(invoiceId, acceptance, timeout);

        }

        /// <summary>
        /// Accept received Invoice. Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice (using allocated lot identified by AllocationId if any).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: An Accepted Invoice cannot be Rejected later. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="acceptance"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Object>> AcceptInvoiceAsyncWithHttpInfo (string invoiceId, Acceptance acceptance, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->AcceptInvoice");

            // verify the required parameter 'acceptance' is set
            if (acceptance == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'acceptance' when calling RequestorApi->AcceptInvoice");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = acceptance;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/invoices/{invoiceId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Amend Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>Allocation</returns>
        public Allocation AmendAllocation (string allocationId, Allocation allocation)
        {
             Golem.Common.Client.Client.ApiResponse<Allocation> localVarResponse = AmendAllocationWithHttpInfo(allocationId, allocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Amend Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>ApiResponse of Allocation</returns>
        public Golem.Common.Client.Client.ApiResponse< Allocation > AmendAllocationWithHttpInfo (string allocationId, Allocation allocation)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationId' when calling RequestorApi->AmendAllocation");

            // verify the required parameter 'allocation' is set
            if (allocation == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocation' when calling RequestorApi->AmendAllocation");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allocationId != null)
                localVarRequestOptions.PathParameters.Add("allocationId", Golem.Common.Client.Client.ClientUtils.ParameterToString(allocationId)); // path parameter
            localVarRequestOptions.Data = allocation;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Allocation >("/allocations/{allocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AmendAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Amend Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> AmendAllocationAsync (string allocationId, Allocation allocation)
        {
             Golem.Common.Client.Client.ApiResponse<Allocation> localVarResponse = await AmendAllocationAsyncWithHttpInfo(allocationId, allocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Amend Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <param name="allocation"></param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Allocation>> AmendAllocationAsyncWithHttpInfo (string allocationId, Allocation allocation)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationId' when calling RequestorApi->AmendAllocation");

            // verify the required parameter 'allocation' is set
            if (allocation == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocation' when calling RequestorApi->AmendAllocation");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (allocationId != null)
                localVarRequestOptions.PathParameters.Add("allocationId", Golem.Common.Client.Client.ClientUtils.ParameterToString(allocationId)); // path parameter
            localVarRequestOptions.Data = allocation;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Allocation>("/allocations/{allocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AmendAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Allocation. Allocate funds to make sure they are not spent elsewhere.
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Allocation</returns>
        public Allocation CreateAllocation (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<Allocation> localVarResponse = CreateAllocationWithHttpInfo(allocation, afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Allocation. Allocate funds to make sure they are not spent elsewhere.
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of Allocation</returns>
        public Golem.Common.Client.Client.ApiResponse< Allocation > CreateAllocationWithHttpInfo (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'allocation' is set
            if (allocation == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocation' when calling RequestorApi->CreateAllocation");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }
            localVarRequestOptions.Data = allocation;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Allocation >("/allocations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Allocation. Allocate funds to make sure they are not spent elsewhere.
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> CreateAllocationAsync (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<Allocation> localVarResponse = await CreateAllocationAsyncWithHttpInfo(allocation, afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Allocation. Allocate funds to make sure they are not spent elsewhere.
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Allocation>> CreateAllocationAsyncWithHttpInfo (Allocation allocation, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'allocation' is set
            if (allocation == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocation' when calling RequestorApi->CreateAllocation");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }
            localVarRequestOptions.Data = allocation;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Allocation>("/allocations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Allocation</returns>
        public Allocation GetAllocation (string allocationId)
        {
             Golem.Common.Client.Client.ApiResponse<Allocation> localVarResponse = GetAllocationWithHttpInfo(allocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>ApiResponse of Allocation</returns>
        public Golem.Common.Client.Client.ApiResponse< Allocation > GetAllocationWithHttpInfo (string allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationId' when calling RequestorApi->GetAllocation");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allocationId != null)
                localVarRequestOptions.PathParameters.Add("allocationId", Golem.Common.Client.Client.ClientUtils.ParameterToString(allocationId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Allocation >("/allocations/{allocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> GetAllocationAsync (string allocationId)
        {
             Golem.Common.Client.Client.ApiResponse<Allocation> localVarResponse = await GetAllocationAsyncWithHttpInfo(allocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Allocation. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Allocation>> GetAllocationAsyncWithHttpInfo (string allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationId' when calling RequestorApi->GetAllocation");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (allocationId != null)
                localVarRequestOptions.PathParameters.Add("allocationId", Golem.Common.Client.Client.ClientUtils.ParameterToString(allocationId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Allocation>("/allocations/{allocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Allocations. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Allocation&gt;</returns>
        public List<Allocation> GetAllocations ()
        {
             Golem.Common.Client.Client.ApiResponse<List<Allocation>> localVarResponse = GetAllocationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Allocations. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Allocation&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<Allocation> > GetAllocationsWithHttpInfo ()
        {
            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Allocation> >("/allocations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Allocations. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Allocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Allocation>> GetAllocationsAsync ()
        {
             Golem.Common.Client.Client.ApiResponse<List<Allocation>> localVarResponse = await GetAllocationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Allocations. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Allocation&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<Allocation>>> GetAllocationsAsyncWithHttpInfo ()
        {

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Allocation>>("/allocations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllocations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>DebitNote</returns>
        public DebitNote GetDebitNote (string debitNoteId)
        {
             Golem.Common.Client.Client.ApiResponse<DebitNote> localVarResponse = GetDebitNoteWithHttpInfo(debitNoteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>ApiResponse of DebitNote</returns>
        public Golem.Common.Client.Client.ApiResponse< DebitNote > GetDebitNoteWithHttpInfo (string debitNoteId)
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->GetDebitNote");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DebitNote >("/debitNotes/{debitNoteId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of DebitNote</returns>
        public async System.Threading.Tasks.Task<DebitNote> GetDebitNoteAsync (string debitNoteId)
        {
             Golem.Common.Client.Client.ApiResponse<DebitNote> localVarResponse = await GetDebitNoteAsyncWithHttpInfo(debitNoteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of ApiResponse (DebitNote)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<DebitNote>> GetDebitNoteAsyncWithHttpInfo (string debitNoteId)
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->GetDebitNote");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DebitNote>("/debitNotes/{debitNoteId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;DebitNoteEvent&gt;</returns>
        public List<DebitNoteEvent> GetDebitNoteEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.Common.Client.Client.ApiResponse<List<DebitNoteEvent>> localVarResponse = GetDebitNoteEventsWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;DebitNoteEvent&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<DebitNoteEvent> > GetDebitNoteEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<DebitNoteEvent> >("/debitNoteEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNoteEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;DebitNoteEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<DebitNoteEvent>> GetDebitNoteEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken))
        {
             Golem.Common.Client.Client.ApiResponse<List<DebitNoteEvent>> localVarResponse = await GetDebitNoteEventsAsyncWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNoteEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<DebitNoteEvent>>> GetDebitNoteEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken))
        {

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DebitNoteEvent>>("/debitNoteEvents", localVarRequestOptions, this.Configuration, token);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNoteEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;DebitNote&gt;</returns>
        public List<DebitNote> GetDebitNotes (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<DebitNote>> localVarResponse = GetDebitNotesWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;DebitNote&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<DebitNote> > GetDebitNotesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<DebitNote> >("/debitNotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;DebitNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<DebitNote>> GetDebitNotesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<DebitNote>> localVarResponse = await GetDebitNotesAsyncWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNote&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<DebitNote>>> GetDebitNotesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DebitNote>>("/debitNotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand. Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>MarketDecoration</returns>
        public MarketDecoration GetDemandDecorations (List<string> allocationIds)
        {
             Golem.Common.Client.Client.ApiResponse<MarketDecoration> localVarResponse = GetDemandDecorationsWithHttpInfo(allocationIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand. Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>ApiResponse of MarketDecoration</returns>
        public Golem.Common.Client.Client.ApiResponse< MarketDecoration > GetDemandDecorationsWithHttpInfo (List<string> allocationIds)
        {
            // verify the required parameter 'allocationIds' is set
            if (allocationIds == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationIds' when calling RequestorApi->GetDemandDecorations");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allocationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("csv", "allocationIds", allocationIds));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MarketDecoration >("/demandDecorations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDemandDecorations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand. Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>Task of MarketDecoration</returns>
        public async System.Threading.Tasks.Task<MarketDecoration> GetDemandDecorationsAsync (List<string> allocationIds)
        {
             Golem.Common.Client.Client.ApiResponse<MarketDecoration> localVarResponse = await GetDemandDecorationsAsyncWithHttpInfo(allocationIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain Demand elements specific to the given allocations, to be appended to a market Demand. Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationIds"></param>
        /// <returns>Task of ApiResponse (MarketDecoration)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<MarketDecoration>> GetDemandDecorationsAsyncWithHttpInfo (List<string> allocationIds)
        {
            // verify the required parameter 'allocationIds' is set
            if (allocationIds == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationIds' when calling RequestorApi->GetDemandDecorations");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (allocationIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("csv", "allocationIds", allocationIds));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MarketDecoration>("/demandDecorations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDemandDecorations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Invoice</returns>
        public Invoice GetInvoice (string invoiceId)
        {
             Golem.Common.Client.Client.ApiResponse<Invoice> localVarResponse = GetInvoiceWithHttpInfo(invoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>ApiResponse of Invoice</returns>
        public Golem.Common.Client.Client.ApiResponse< Invoice > GetInvoiceWithHttpInfo (string invoiceId)
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->GetInvoice");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Invoice >("/invoices/{invoiceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string invoiceId)
        {
             Golem.Common.Client.Client.ApiResponse<Invoice> localVarResponse = await GetInvoiceAsyncWithHttpInfo(invoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string invoiceId)
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->GetInvoice");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Invoice>("/invoices/{invoiceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;InvoiceEvent&gt;</returns>
        public List<InvoiceEvent> GetInvoiceEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.Common.Client.Client.ApiResponse<List<InvoiceEvent>> localVarResponse = GetInvoiceEventsWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;InvoiceEvent&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<InvoiceEvent> > GetInvoiceEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<InvoiceEvent> >("/invoiceEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;InvoiceEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvoiceEvent>> GetInvoiceEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken))
        {
             Golem.Common.Client.Client.ApiResponse<List<InvoiceEvent>> localVarResponse = await GetInvoiceEventsAsyncWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvoiceEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<InvoiceEvent>>> GetInvoiceEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string), CancellationToken token = default(CancellationToken))
        {

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InvoiceEvent>>("/invoiceEvents", localVarRequestOptions, this.Configuration, token);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Invoice&gt;</returns>
        public List<Invoice> GetInvoices (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<Invoice>> localVarResponse = GetInvoicesWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<Invoice> > GetInvoicesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Invoice> >("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        public async System.Threading.Tasks.Task<List<Invoice>> GetInvoicesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<Invoice>> localVarResponse = await GetInvoicesAsyncWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<Invoice>>> GetInvoicesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Invoice>>("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Payment</returns>
        public Payment GetPayment (string paymentId)
        {
             Golem.Common.Client.Client.ApiResponse<Payment> localVarResponse = GetPaymentWithHttpInfo(paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of Payment</returns>
        public Golem.Common.Client.Client.ApiResponse< Payment > GetPaymentWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RequestorApi->GetPayment");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (paymentId != null)
                localVarRequestOptions.PathParameters.Add("paymentId", Golem.Common.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Payment >("/payments/{paymentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GetPaymentAsync (string paymentId)
        {
             Golem.Common.Client.Client.ApiResponse<Payment> localVarResponse = await GetPaymentAsyncWithHttpInfo(paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Payment>> GetPaymentAsyncWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling RequestorApi->GetPayment");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (paymentId != null)
                localVarRequestOptions.PathParameters.Add("paymentId", Golem.Common.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Payment>("/payments/{paymentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GetPayments (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.Common.Client.Client.ApiResponse<List<Payment>> localVarResponse = GetPaymentsWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<Payment> > GetPaymentsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Payment> >("/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GetPaymentsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.Common.Client.Client.ApiResponse<List<Payment>> localVarResponse = await GetPaymentsAsyncWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<Payment>>> GetPaymentsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Payment>>("/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GetPaymentsForDebitNote (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<Payment>> localVarResponse = GetPaymentsForDebitNoteWithHttpInfo(debitNoteId, afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<Payment> > GetPaymentsForDebitNoteWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->GetPaymentsForDebitNote");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Payment> >("/debitNotes/{debitNoteId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GetPaymentsForDebitNoteAsync (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<Payment>> localVarResponse = await GetPaymentsForDebitNoteAsyncWithHttpInfo(debitNoteId, afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<Payment>>> GetPaymentsForDebitNoteAsyncWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->GetPaymentsForDebitNote");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Payment>>("/debitNotes/{debitNoteId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GetPaymentsForInvoice (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<Payment>> localVarResponse = GetPaymentsForInvoiceWithHttpInfo(invoiceId, afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<Payment> > GetPaymentsForInvoiceWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->GetPaymentsForInvoice");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Payment> >("/invoices/{invoiceId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GetPaymentsForInvoiceAsync (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.Common.Client.Client.ApiResponse<List<Payment>> localVarResponse = await GetPaymentsForInvoiceAsyncWithHttpInfo(invoiceId, afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<Payment>>> GetPaymentsForInvoiceAsyncWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->GetPaymentsForInvoice");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Payment>>("/invoices/{invoiceId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available accounts for sending payments. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Account&gt;</returns>
        public List<Account> GetRequestorAccounts ()
        {
             Golem.Common.Client.Client.ApiResponse<List<Account>> localVarResponse = GetRequestorAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available accounts for sending payments. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        public Golem.Common.Client.Client.ApiResponse< List<Account> > GetRequestorAccountsWithHttpInfo ()
        {
            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Account> >("/requestorAccounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRequestorAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available accounts for sending payments. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Account&gt;</returns>
        public async System.Threading.Tasks.Task<List<Account>> GetRequestorAccountsAsync ()
        {
             Golem.Common.Client.Client.ApiResponse<List<Account>> localVarResponse = await GetRequestorAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available accounts for sending payments. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<List<Account>>> GetRequestorAccountsAsyncWithHttpInfo ()
        {

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Account>>("/requestorAccounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRequestorAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Invoice</returns>
        public Invoice IssueInvoice (Invoice invoice)
        {
             Golem.Common.Client.Client.ApiResponse<Invoice> localVarResponse = IssueInvoiceWithHttpInfo(invoice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>ApiResponse of Invoice</returns>
        public Golem.Common.Client.Client.ApiResponse< Invoice > IssueInvoiceWithHttpInfo (Invoice invoice)
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoice' when calling RequestorApi->IssueInvoice");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = invoice;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Invoice >("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> IssueInvoiceAsync (Invoice invoice)
        {
             Golem.Common.Client.Client.ApiResponse<Invoice> localVarResponse = await IssueInvoiceAsyncWithHttpInfo(invoice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Invoice>> IssueInvoiceAsyncWithHttpInfo (Invoice invoice)
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoice' when calling RequestorApi->IssueInvoice");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = invoice;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Invoice>("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject received Debit Note. Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void RejectDebitNote (string debitNoteId, Rejection rejection, float? timeout = default(float?))
        {
             RejectDebitNoteWithHttpInfo(debitNoteId, rejection, timeout);
        }

        /// <summary>
        /// Reject received Debit Note. Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.Common.Client.Client.ApiResponse<Object> RejectDebitNoteWithHttpInfo (string debitNoteId, Rejection rejection, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->RejectDebitNote");

            // verify the required parameter 'rejection' is set
            if (rejection == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'rejection' when calling RequestorApi->RejectDebitNote");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = rejection;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/debitNotes/{debitNoteId}/reject", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject received Debit Note. Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RejectDebitNoteAsync (string debitNoteId, Rejection rejection, float? timeout = default(float?))
        {
             await RejectDebitNoteAsyncWithHttpInfo(debitNoteId, rejection, timeout);

        }

        /// <summary>
        /// Reject received Debit Note. Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Object>> RejectDebitNoteAsyncWithHttpInfo (string debitNoteId, Rejection rejection, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling RequestorApi->RejectDebitNote");

            // verify the required parameter 'rejection' is set
            if (rejection == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'rejection' when calling RequestorApi->RejectDebitNote");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.Common.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = rejection;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/debitNotes/{debitNoteId}/reject", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject received Invoice. Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void RejectInvoice (string invoiceId, Rejection rejection, float? timeout = default(float?))
        {
             RejectInvoiceWithHttpInfo(invoiceId, rejection, timeout);
        }

        /// <summary>
        /// Reject received Invoice. Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.Common.Client.Client.ApiResponse<Object> RejectInvoiceWithHttpInfo (string invoiceId, Rejection rejection, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->RejectInvoice");

            // verify the required parameter 'rejection' is set
            if (rejection == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'rejection' when calling RequestorApi->RejectInvoice");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = rejection;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/invoices/{invoiceId}/reject", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject received Invoice. Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RejectInvoiceAsync (string invoiceId, Rejection rejection, float? timeout = default(float?))
        {
             await RejectInvoiceAsyncWithHttpInfo(invoiceId, rejection, timeout);

        }

        /// <summary>
        /// Reject received Invoice. Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).  This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.  NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="rejection"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Object>> RejectInvoiceAsyncWithHttpInfo (string invoiceId, Rejection rejection, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling RequestorApi->RejectInvoice");

            // verify the required parameter 'rejection' is set
            if (rejection == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'rejection' when calling RequestorApi->RejectInvoice");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.Common.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.Common.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            localVarRequestOptions.Data = rejection;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/invoices/{invoiceId}/reject", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Release Allocation. The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns></returns>
        public void ReleaseAllocation (string allocationId)
        {
             ReleaseAllocationWithHttpInfo(allocationId);
        }

        /// <summary>
        /// Release Allocation. The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.Common.Client.Client.ApiResponse<Object> ReleaseAllocationWithHttpInfo (string allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationId' when calling RequestorApi->ReleaseAllocation");

            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.Common.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.Common.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allocationId != null)
                localVarRequestOptions.PathParameters.Add("allocationId", Golem.Common.Client.Client.ClientUtils.ParameterToString(allocationId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/allocations/{allocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Release Allocation. The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReleaseAllocationAsync (string allocationId)
        {
             await ReleaseAllocationAsyncWithHttpInfo(allocationId);

        }

        /// <summary>
        /// Release Allocation. The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).  If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit). 
        /// </summary>
        /// <exception cref="Golem.Common.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.Common.Client.Client.ApiResponse<Object>> ReleaseAllocationAsyncWithHttpInfo (string allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new Golem.Common.Client.Client.ApiException(400, "Missing required parameter 'allocationId' when calling RequestorApi->ReleaseAllocation");


            Golem.Common.Client.Client.RequestOptions localVarRequestOptions = new Golem.Common.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (allocationId != null)
                localVarRequestOptions.PathParameters.Add("allocationId", Golem.Common.Client.Client.ClientUtils.ParameterToString(allocationId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.Common.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/allocations/{allocationId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseAllocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

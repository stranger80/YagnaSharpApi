/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Golem.PaymentApi.Client.Client;
using Golem.PaymentApi.Client.Model;

namespace Golem.PaymentApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Debit Note.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void CancelDebitNote (string debitNoteId, float? timeout = default(float?));

        /// <summary>
        /// Cancel Debit Note.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelDebitNoteWithHttpInfo (string debitNoteId, float? timeout = default(float?));
        /// <summary>
        /// Cancel Invoice.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void CancelInvoice (string invoiceId, float? timeout = default(float?));

        /// <summary>
        /// Cancel Invoice.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelInvoiceWithHttpInfo (string invoiceId, float? timeout = default(float?));
        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>DebitNote</returns>
        DebitNote GetDebitNote (string debitNoteId);

        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>ApiResponse of DebitNote</returns>
        ApiResponse<DebitNote> GetDebitNoteWithHttpInfo (string debitNoteId);
        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;DebitNoteEvent&gt;</returns>
        List<DebitNoteEvent> GetDebitNoteEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;DebitNoteEvent&gt;</returns>
        ApiResponse<List<DebitNoteEvent>> GetDebitNoteEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;DebitNote&gt;</returns>
        List<DebitNote> GetDebitNotes (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;DebitNote&gt;</returns>
        ApiResponse<List<DebitNote>> GetDebitNotesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Invoice</returns>
        Invoice GetInvoice (string invoiceId);

        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> GetInvoiceWithHttpInfo (string invoiceId);
        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;InvoiceEvent&gt;</returns>
        List<InvoiceEvent> GetInvoiceEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;InvoiceEvent&gt;</returns>
        ApiResponse<List<InvoiceEvent>> GetInvoiceEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Invoice&gt;</returns>
        List<Invoice> GetInvoices (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        ApiResponse<List<Invoice>> GetInvoicesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Payment</returns>
        Payment GetPayment (string paymentId);

        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GetPaymentWithHttpInfo (string paymentId);
        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GetPayments (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GetPaymentsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GetPaymentsForDebitNote (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GetPaymentsForDebitNoteWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GetPaymentsForInvoice (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GetPaymentsForInvoiceWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get available accounts for receiving payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Account&gt;</returns>
        List<Account> GetProviderAccounts ();

        /// <summary>
        /// Get available accounts for receiving payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        ApiResponse<List<Account>> GetProviderAccountsWithHttpInfo ();
        /// <summary>
        /// Issue a Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>DebitNote</returns>
        DebitNote IssueDebitNote (DebitNote debitNote);

        /// <summary>
        /// Issue a Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>ApiResponse of DebitNote</returns>
        ApiResponse<DebitNote> IssueDebitNoteWithHttpInfo (DebitNote debitNote);
        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Invoice</returns>
        Invoice IssueInvoice (Invoice invoice);

        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> IssueInvoiceWithHttpInfo (Invoice invoice);
        /// <summary>
        /// Send Debit Note to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void SendDebitNote (string debitNoteId, float? timeout = default(float?));

        /// <summary>
        /// Send Debit Note to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendDebitNoteWithHttpInfo (string debitNoteId, float? timeout = default(float?));
        /// <summary>
        /// Send Invoice to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        void SendInvoice (string invoiceId, float? timeout = default(float?));

        /// <summary>
        /// Send Invoice to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendInvoiceWithHttpInfo (string invoiceId, float? timeout = default(float?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Debit Note.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelDebitNoteAsync (string debitNoteId, float? timeout = default(float?));

        /// <summary>
        /// Cancel Debit Note.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelDebitNoteAsyncWithHttpInfo (string debitNoteId, float? timeout = default(float?));
        /// <summary>
        /// Cancel Invoice.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelInvoiceAsync (string invoiceId, float? timeout = default(float?));

        /// <summary>
        /// Cancel Invoice.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelInvoiceAsyncWithHttpInfo (string invoiceId, float? timeout = default(float?));
        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of DebitNote</returns>
        System.Threading.Tasks.Task<DebitNote> GetDebitNoteAsync (string debitNoteId);

        /// <summary>
        /// Get Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of ApiResponse (DebitNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebitNote>> GetDebitNoteAsyncWithHttpInfo (string debitNoteId);
        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;DebitNoteEvent&gt;</returns>
        System.Threading.Tasks.Task<List<DebitNoteEvent>> GetDebitNoteEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Debit Note events.
        /// </summary>
        /// <remarks>
        /// Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNoteEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DebitNoteEvent>>> GetDebitNoteEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;DebitNote&gt;</returns>
        System.Threading.Tasks.Task<List<DebitNote>> GetDebitNotesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DebitNote>>> GetDebitNotesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string invoiceId);

        /// <summary>
        /// Get Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string invoiceId);
        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;InvoiceEvent&gt;</returns>
        System.Threading.Tasks.Task<List<InvoiceEvent>> GetInvoiceEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Invoice events.
        /// </summary>
        /// <remarks>
        /// Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvoiceEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvoiceEvent>>> GetInvoiceEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        System.Threading.Tasks.Task<List<Invoice>> GetInvoicesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Invoice>>> GetInvoicesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GetPaymentAsync (string paymentId);

        /// <summary>
        /// Get Payment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentAsyncWithHttpInfo (string paymentId);
        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GetPaymentsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));

        /// <summary>
        /// Get Payments.
        /// </summary>
        /// <remarks>
        /// Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GetPaymentsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string));
        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GetPaymentsForDebitNoteAsync (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GetPaymentsForDebitNoteAsyncWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GetPaymentsForInvoiceAsync (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));

        /// <summary>
        /// Get Payments for Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GetPaymentsForInvoiceAsyncWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?));
        /// <summary>
        /// Get available accounts for receiving payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Account&gt;</returns>
        System.Threading.Tasks.Task<List<Account>> GetProviderAccountsAsync ();

        /// <summary>
        /// Get available accounts for receiving payments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Account>>> GetProviderAccountsAsyncWithHttpInfo ();
        /// <summary>
        /// Issue a Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>Task of DebitNote</returns>
        System.Threading.Tasks.Task<DebitNote> IssueDebitNoteAsync (DebitNote debitNote);

        /// <summary>
        /// Issue a Debit Note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>Task of ApiResponse (DebitNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebitNote>> IssueDebitNoteAsyncWithHttpInfo (DebitNote debitNote);
        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> IssueInvoiceAsync (Invoice invoice);

        /// <summary>
        /// Issue an Invoice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> IssueInvoiceAsyncWithHttpInfo (Invoice invoice);
        /// <summary>
        /// Send Debit Note to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendDebitNoteAsync (string debitNoteId, float? timeout = default(float?));

        /// <summary>
        /// Send Debit Note to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendDebitNoteAsyncWithHttpInfo (string debitNoteId, float? timeout = default(float?));
        /// <summary>
        /// Send Invoice to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendInvoiceAsync (string invoiceId, float? timeout = default(float?));

        /// <summary>
        /// Send Invoice to Requestor.
        /// </summary>
        /// <remarks>
        /// This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </remarks>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendInvoiceAsyncWithHttpInfo (string invoiceId, float? timeout = default(float?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderApi : IProviderApiSync, IProviderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProviderApi : IProviderApi
    {
        private Golem.PaymentApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProviderApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProviderApi(String basePath)
        {
            this.Configuration = Golem.PaymentApi.Client.Client.Configuration.MergeConfigurations(
                Golem.PaymentApi.Client.Client.GlobalConfiguration.Instance,
                new Golem.PaymentApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Golem.PaymentApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.PaymentApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Golem.PaymentApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProviderApi(Golem.PaymentApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Golem.PaymentApi.Client.Client.Configuration.MergeConfigurations(
                Golem.PaymentApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Golem.PaymentApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.PaymentApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Golem.PaymentApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProviderApi(Golem.PaymentApi.Client.Client.ISynchronousClient client,Golem.PaymentApi.Client.Client.IAsynchronousClient asyncClient, Golem.PaymentApi.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Golem.PaymentApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Golem.PaymentApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Golem.PaymentApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Golem.PaymentApi.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Golem.PaymentApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Debit Note. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void CancelDebitNote (string debitNoteId, float? timeout = default(float?))
        {
             CancelDebitNoteWithHttpInfo(debitNoteId, timeout);
        }

        /// <summary>
        /// Cancel Debit Note. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse<Object> CancelDebitNoteWithHttpInfo (string debitNoteId, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->CancelDebitNote");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/debitNotes/{debitNoteId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Debit Note. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelDebitNoteAsync (string debitNoteId, float? timeout = default(float?))
        {
             await CancelDebitNoteAsyncWithHttpInfo(debitNoteId, timeout);

        }

        /// <summary>
        /// Cancel Debit Note. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<Object>> CancelDebitNoteAsyncWithHttpInfo (string debitNoteId, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->CancelDebitNote");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/debitNotes/{debitNoteId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Invoice. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void CancelInvoice (string invoiceId, float? timeout = default(float?))
        {
             CancelInvoiceWithHttpInfo(invoiceId, timeout);
        }

        /// <summary>
        /// Cancel Invoice. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse<Object> CancelInvoiceWithHttpInfo (string invoiceId, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->CancelInvoice");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/invoices/{invoiceId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Invoice. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelInvoiceAsync (string invoiceId, float? timeout = default(float?))
        {
             await CancelInvoiceAsyncWithHttpInfo(invoiceId, timeout);

        }

        /// <summary>
        /// Cancel Invoice. This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already paid it. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<Object>> CancelInvoiceAsyncWithHttpInfo (string invoiceId, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->CancelInvoice");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/invoices/{invoiceId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>DebitNote</returns>
        public DebitNote GetDebitNote (string debitNoteId)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<DebitNote> localVarResponse = GetDebitNoteWithHttpInfo(debitNoteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>ApiResponse of DebitNote</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< DebitNote > GetDebitNoteWithHttpInfo (string debitNoteId)
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->GetDebitNote");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DebitNote >("/debitNotes/{debitNoteId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of DebitNote</returns>
        public async System.Threading.Tasks.Task<DebitNote> GetDebitNoteAsync (string debitNoteId)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<DebitNote> localVarResponse = await GetDebitNoteAsyncWithHttpInfo(debitNoteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <returns>Task of ApiResponse (DebitNote)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<DebitNote>> GetDebitNoteAsyncWithHttpInfo (string debitNoteId)
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->GetDebitNote");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DebitNote>("/debitNotes/{debitNoteId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;DebitNoteEvent&gt;</returns>
        public List<DebitNoteEvent> GetDebitNoteEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<DebitNoteEvent>> localVarResponse = GetDebitNoteEventsWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;DebitNoteEvent&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<DebitNoteEvent> > GetDebitNoteEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<DebitNoteEvent> >("/debitNoteEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNoteEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;DebitNoteEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<DebitNoteEvent>> GetDebitNoteEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<DebitNoteEvent>> localVarResponse = await GetDebitNoteEventsAsyncWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Debit Note events. Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNoteEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<DebitNoteEvent>>> GetDebitNoteEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DebitNoteEvent>>("/debitNoteEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNoteEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;DebitNote&gt;</returns>
        public List<DebitNote> GetDebitNotes (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<DebitNote>> localVarResponse = GetDebitNotesWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;DebitNote&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<DebitNote> > GetDebitNotesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<DebitNote> >("/debitNotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;DebitNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<DebitNote>> GetDebitNotesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<DebitNote>> localVarResponse = await GetDebitNotesAsyncWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Debit Notes known by this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;DebitNote&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<DebitNote>>> GetDebitNotesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DebitNote>>("/debitNotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDebitNotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Invoice</returns>
        public Invoice GetInvoice (string invoiceId)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<Invoice> localVarResponse = GetInvoiceWithHttpInfo(invoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>ApiResponse of Invoice</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< Invoice > GetInvoiceWithHttpInfo (string invoiceId)
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->GetInvoice");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Invoice >("/invoices/{invoiceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string invoiceId)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<Invoice> localVarResponse = await GetInvoiceAsyncWithHttpInfo(invoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string invoiceId)
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->GetInvoice");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Invoice>("/invoices/{invoiceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;InvoiceEvent&gt;</returns>
        public List<InvoiceEvent> GetInvoiceEvents (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<InvoiceEvent>> localVarResponse = GetInvoiceEventsWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;InvoiceEvent&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<InvoiceEvent> > GetInvoiceEventsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<InvoiceEvent> >("/invoiceEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;InvoiceEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvoiceEvent>> GetInvoiceEventsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<InvoiceEvent>> localVarResponse = await GetInvoiceEventsAsyncWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Invoice events. Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed. **Note:** The events are persistent, ie. calling the API does not remove the event records from receiving queue. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvoiceEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<InvoiceEvent>>> GetInvoiceEventsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InvoiceEvent>>("/invoiceEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Invoice&gt;</returns>
        public List<Invoice> GetInvoices (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Invoice>> localVarResponse = GetInvoicesWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<Invoice> > GetInvoicesWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Invoice> >("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        public async System.Threading.Tasks.Task<List<Invoice>> GetInvoicesAsync (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Invoice>> localVarResponse = await GetInvoicesAsyncWithHttpInfo(afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Invoices known to this node (either issued by this Provider or received by this Requestor). 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<Invoice>>> GetInvoicesAsyncWithHttpInfo (DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Invoice>>("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Payment</returns>
        public Payment GetPayment (string paymentId)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<Payment> localVarResponse = GetPaymentWithHttpInfo(paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of Payment</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< Payment > GetPaymentWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling ProviderApi->GetPayment");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (paymentId != null)
                localVarRequestOptions.PathParameters.Add("paymentId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Payment >("/payments/{paymentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GetPaymentAsync (string paymentId)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<Payment> localVarResponse = await GetPaymentAsyncWithHttpInfo(paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payment. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<Payment>> GetPaymentAsyncWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'paymentId' when calling ProviderApi->GetPayment");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (paymentId != null)
                localVarRequestOptions.PathParameters.Add("paymentId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(paymentId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Payment>("/payments/{paymentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GetPayments (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>> localVarResponse = GetPaymentsWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<Payment> > GetPaymentsWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Payment> >("/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GetPaymentsAsync (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>> localVarResponse = await GetPaymentsAsyncWithHttpInfo(timeout, afterTimestamp, maxEvents, appSessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payments. Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. &#x60;afterTimestamp&#x60; parameter can be used in order to get just the &#39;new&#39; payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>>> GetPaymentsAsyncWithHttpInfo (float? timeout = default(float?), DateTime? afterTimestamp = default(DateTime?), int? maxEvents = default(int?), string appSessionId = default(string))
        {

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Payment>>("/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GetPaymentsForDebitNote (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>> localVarResponse = GetPaymentsForDebitNoteWithHttpInfo(debitNoteId, afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<Payment> > GetPaymentsForDebitNoteWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->GetPaymentsForDebitNote");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Payment> >("/debitNotes/{debitNoteId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GetPaymentsForDebitNoteAsync (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>> localVarResponse = await GetPaymentsForDebitNoteAsyncWithHttpInfo(debitNoteId, afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payments for Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>>> GetPaymentsForDebitNoteAsyncWithHttpInfo (string debitNoteId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->GetPaymentsForDebitNote");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Payment>>("/debitNotes/{debitNoteId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GetPaymentsForInvoice (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>> localVarResponse = GetPaymentsForInvoiceWithHttpInfo(invoiceId, afterTimestamp, maxItems);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<Payment> > GetPaymentsForInvoiceWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->GetPaymentsForInvoice");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Payment> >("/invoices/{invoiceId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GetPaymentsForInvoiceAsync (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>> localVarResponse = await GetPaymentsForInvoiceAsyncWithHttpInfo(invoiceId, afterTimestamp, maxItems);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payments for Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="maxItems">Maximum number of items that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<Payment>>> GetPaymentsForInvoiceAsyncWithHttpInfo (string invoiceId, DateTime? afterTimestamp = default(DateTime?), int? maxItems = default(int?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->GetPaymentsForInvoice");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxItems", maxItems));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Payment>>("/invoices/{invoiceId}/payments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentsForInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available accounts for receiving payments. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Account&gt;</returns>
        public List<Account> GetProviderAccounts ()
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Account>> localVarResponse = GetProviderAccountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available accounts for receiving payments. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Account&gt;</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< List<Account> > GetProviderAccountsWithHttpInfo ()
        {
            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Account> >("/providerAccounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProviderAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available accounts for receiving payments. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Account&gt;</returns>
        public async System.Threading.Tasks.Task<List<Account>> GetProviderAccountsAsync ()
        {
             Golem.PaymentApi.Client.Client.ApiResponse<List<Account>> localVarResponse = await GetProviderAccountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available accounts for receiving payments. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Account&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<List<Account>>> GetProviderAccountsAsyncWithHttpInfo ()
        {

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Account>>("/providerAccounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProviderAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>DebitNote</returns>
        public DebitNote IssueDebitNote (DebitNote debitNote)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<DebitNote> localVarResponse = IssueDebitNoteWithHttpInfo(debitNote);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>ApiResponse of DebitNote</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< DebitNote > IssueDebitNoteWithHttpInfo (DebitNote debitNote)
        {
            // verify the required parameter 'debitNote' is set
            if (debitNote == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNote' when calling ProviderApi->IssueDebitNote");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = debitNote;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< DebitNote >("/debitNotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue a Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>Task of DebitNote</returns>
        public async System.Threading.Tasks.Task<DebitNote> IssueDebitNoteAsync (DebitNote debitNote)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<DebitNote> localVarResponse = await IssueDebitNoteAsyncWithHttpInfo(debitNote);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Issue a Debit Note. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNote"></param>
        /// <returns>Task of ApiResponse (DebitNote)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<DebitNote>> IssueDebitNoteAsyncWithHttpInfo (DebitNote debitNote)
        {
            // verify the required parameter 'debitNote' is set
            if (debitNote == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNote' when calling ProviderApi->IssueDebitNote");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = debitNote;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DebitNote>("/debitNotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Invoice</returns>
        public Invoice IssueInvoice (Invoice invoice)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<Invoice> localVarResponse = IssueInvoiceWithHttpInfo(invoice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>ApiResponse of Invoice</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse< Invoice > IssueInvoiceWithHttpInfo (Invoice invoice)
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoice' when calling ProviderApi->IssueInvoice");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = invoice;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Invoice >("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> IssueInvoiceAsync (Invoice invoice)
        {
             Golem.PaymentApi.Client.Client.ApiResponse<Invoice> localVarResponse = await IssueInvoiceAsyncWithHttpInfo(invoice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Issue an Invoice. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<Invoice>> IssueInvoiceAsyncWithHttpInfo (Invoice invoice)
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoice' when calling ProviderApi->IssueInvoice");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = invoice;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Invoice>("/invoices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Debit Note to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void SendDebitNote (string debitNoteId, float? timeout = default(float?))
        {
             SendDebitNoteWithHttpInfo(debitNoteId, timeout);
        }

        /// <summary>
        /// Send Debit Note to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse<Object> SendDebitNoteWithHttpInfo (string debitNoteId, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->SendDebitNote");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/debitNotes/{debitNoteId}/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Debit Note to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendDebitNoteAsync (string debitNoteId, float? timeout = default(float?))
        {
             await SendDebitNoteAsyncWithHttpInfo(debitNoteId, timeout);

        }

        /// <summary>
        /// Send Debit Note to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="debitNoteId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<Object>> SendDebitNoteAsyncWithHttpInfo (string debitNoteId, float? timeout = default(float?))
        {
            // verify the required parameter 'debitNoteId' is set
            if (debitNoteId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'debitNoteId' when calling ProviderApi->SendDebitNote");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (debitNoteId != null)
                localVarRequestOptions.PathParameters.Add("debitNoteId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(debitNoteId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/debitNotes/{debitNoteId}/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendDebitNote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Invoice to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns></returns>
        public void SendInvoice (string invoiceId, float? timeout = default(float?))
        {
             SendInvoiceWithHttpInfo(invoiceId, timeout);
        }

        /// <summary>
        /// Send Invoice to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.PaymentApi.Client.Client.ApiResponse<Object> SendInvoiceWithHttpInfo (string invoiceId, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->SendInvoice");

            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.PaymentApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/invoices/{invoiceId}/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Invoice to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendInvoiceAsync (string invoiceId, float? timeout = default(float?))
        {
             await SendInvoiceAsyncWithHttpInfo(invoiceId, timeout);

        }

        /// <summary>
        /// Send Invoice to Requestor. This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed. 
        /// </summary>
        /// <exception cref="Golem.PaymentApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceId"></param>
        /// <param name="timeout">Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party&#39;s response indefinitely)  (optional, default to 5.0F)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.PaymentApi.Client.Client.ApiResponse<Object>> SendInvoiceAsyncWithHttpInfo (string invoiceId, float? timeout = default(float?))
        {
            // verify the required parameter 'invoiceId' is set
            if (invoiceId == null)
                throw new Golem.PaymentApi.Client.Client.ApiException(400, "Missing required parameter 'invoiceId' when calling ProviderApi->SendInvoice");


            Golem.PaymentApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.PaymentApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (invoiceId != null)
                localVarRequestOptions.PathParameters.Add("invoiceId", Golem.PaymentApi.Client.Client.ClientUtils.ParameterToString(invoiceId)); // path parameter
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.PaymentApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.PaymentApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/invoices/{invoiceId}/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendInvoice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

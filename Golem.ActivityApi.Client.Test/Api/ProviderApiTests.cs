/* 
 * Yagna Activity API
 *
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Golem.ActivityApi.Client.Client;
using Golem.ActivityApi.Client.Api;
using Golem.ActivityApi.Client.Model;

namespace Golem.ActivityApi.Client.Test
{
    /// <summary>
    ///  Class for testing ProviderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProviderApiTests : IDisposable
    {
        private ProviderApi instance;

        public ProviderApiTests()
        {
            instance = new ProviderApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProviderApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProviderApi
            //Assert.IsType(typeof(ProviderApi), instance, "instance is a ProviderApi");
        }

        
        /// <summary>
        /// Test CollectActivityEvents
        /// </summary>
        [Fact]
        public void CollectActivityEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appSessionId = null;
            //DateTime? afterTimestamp = null;
            //float? timeout = null;
            //int? maxEvents = null;
            //var response = instance.CollectActivityEvents(appSessionId, afterTimestamp, timeout, maxEvents);
            //Assert.IsType<List<ProviderEvent>> (response, "response is List<ProviderEvent>");
        }
        
        /// <summary>
        /// Test GetActivityState
        /// </summary>
        [Fact]
        public void GetActivityStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string activityId = null;
            //var response = instance.GetActivityState(activityId);
            //Assert.IsType<ActivityState> (response, "response is ActivityState");
        }
        
        /// <summary>
        /// Test GetActivityUsage
        /// </summary>
        [Fact]
        public void GetActivityUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string activityId = null;
            //var response = instance.GetActivityUsage(activityId);
            //Assert.IsType<ActivityUsage> (response, "response is ActivityUsage");
        }
        
        /// <summary>
        /// Test SetActivityState
        /// </summary>
        [Fact]
        public void SetActivityStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string activityId = null;
            //ActivityState activityState = null;
            //instance.SetActivityState(activityId, activityState);
            
        }
        
    }

}

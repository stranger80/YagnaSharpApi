/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Golem.PaymentApi.Client.Client;
using Golem.PaymentApi.Client.Api;
using Golem.PaymentApi.Client.Model;

namespace Golem.PaymentApi.Client.Test
{
    /// <summary>
    ///  Class for testing RequestorApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RequestorApiTests : IDisposable
    {
        private RequestorApi instance;

        public RequestorApiTests()
        {
            instance = new RequestorApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RequestorApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RequestorApi
            //Assert.IsType(typeof(RequestorApi), instance, "instance is a RequestorApi");
        }

        
        /// <summary>
        /// Test AcceptDebitNote
        /// </summary>
        [Fact]
        public void AcceptDebitNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitNoteId = null;
            //Acceptance acceptance = null;
            //float? timeout = null;
            //instance.AcceptDebitNote(debitNoteId, acceptance, timeout);
            
        }
        
        /// <summary>
        /// Test AcceptInvoice
        /// </summary>
        [Fact]
        public void AcceptInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invoiceId = null;
            //Acceptance acceptance = null;
            //float? timeout = null;
            //instance.AcceptInvoice(invoiceId, acceptance, timeout);
            
        }
        
        /// <summary>
        /// Test AmendAllocation
        /// </summary>
        [Fact]
        public void AmendAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string allocationId = null;
            //Allocation allocation = null;
            //var response = instance.AmendAllocation(allocationId, allocation);
            //Assert.IsType<Allocation> (response, "response is Allocation");
        }
        
        /// <summary>
        /// Test CreateAllocation
        /// </summary>
        [Fact]
        public void CreateAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Allocation allocation = null;
            //DateTime? afterTimestamp = null;
            //int? maxItems = null;
            //var response = instance.CreateAllocation(allocation, afterTimestamp, maxItems);
            //Assert.IsType<Allocation> (response, "response is Allocation");
        }
        
        /// <summary>
        /// Test GetAllocation
        /// </summary>
        [Fact]
        public void GetAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string allocationId = null;
            //var response = instance.GetAllocation(allocationId);
            //Assert.IsType<Allocation> (response, "response is Allocation");
        }
        
        /// <summary>
        /// Test GetAllocations
        /// </summary>
        [Fact]
        public void GetAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllocations();
            //Assert.IsType<List<Allocation>> (response, "response is List<Allocation>");
        }
        
        /// <summary>
        /// Test GetDebitNote
        /// </summary>
        [Fact]
        public void GetDebitNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitNoteId = null;
            //var response = instance.GetDebitNote(debitNoteId);
            //Assert.IsType<DebitNote> (response, "response is DebitNote");
        }
        
        /// <summary>
        /// Test GetDebitNoteEvents
        /// </summary>
        [Fact]
        public void GetDebitNoteEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //float? timeout = null;
            //DateTime? afterTimestamp = null;
            //int? maxEvents = null;
            //string appSessionId = null;
            //var response = instance.GetDebitNoteEvents(timeout, afterTimestamp, maxEvents, appSessionId);
            //Assert.IsType<List<DebitNoteEvent>> (response, "response is List<DebitNoteEvent>");
        }
        
        /// <summary>
        /// Test GetDebitNotes
        /// </summary>
        [Fact]
        public void GetDebitNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? afterTimestamp = null;
            //int? maxItems = null;
            //var response = instance.GetDebitNotes(afterTimestamp, maxItems);
            //Assert.IsType<List<DebitNote>> (response, "response is List<DebitNote>");
        }
        
        /// <summary>
        /// Test GetDemandDecorations
        /// </summary>
        [Fact]
        public void GetDemandDecorationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> allocationIds = null;
            //var response = instance.GetDemandDecorations(allocationIds);
            //Assert.IsType<MarketDecoration> (response, "response is MarketDecoration");
        }
        
        /// <summary>
        /// Test GetInvoice
        /// </summary>
        [Fact]
        public void GetInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invoiceId = null;
            //var response = instance.GetInvoice(invoiceId);
            //Assert.IsType<Invoice> (response, "response is Invoice");
        }
        
        /// <summary>
        /// Test GetInvoiceEvents
        /// </summary>
        [Fact]
        public void GetInvoiceEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //float? timeout = null;
            //DateTime? afterTimestamp = null;
            //int? maxEvents = null;
            //string appSessionId = null;
            //var response = instance.GetInvoiceEvents(timeout, afterTimestamp, maxEvents, appSessionId);
            //Assert.IsType<List<InvoiceEvent>> (response, "response is List<InvoiceEvent>");
        }
        
        /// <summary>
        /// Test GetInvoices
        /// </summary>
        [Fact]
        public void GetInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? afterTimestamp = null;
            //int? maxItems = null;
            //var response = instance.GetInvoices(afterTimestamp, maxItems);
            //Assert.IsType<List<Invoice>> (response, "response is List<Invoice>");
        }
        
        /// <summary>
        /// Test GetPayment
        /// </summary>
        [Fact]
        public void GetPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentId = null;
            //var response = instance.GetPayment(paymentId);
            //Assert.IsType<Payment> (response, "response is Payment");
        }
        
        /// <summary>
        /// Test GetPayments
        /// </summary>
        [Fact]
        public void GetPaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //float? timeout = null;
            //DateTime? afterTimestamp = null;
            //int? maxEvents = null;
            //string appSessionId = null;
            //var response = instance.GetPayments(timeout, afterTimestamp, maxEvents, appSessionId);
            //Assert.IsType<List<Payment>> (response, "response is List<Payment>");
        }
        
        /// <summary>
        /// Test GetPaymentsForDebitNote
        /// </summary>
        [Fact]
        public void GetPaymentsForDebitNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitNoteId = null;
            //DateTime? afterTimestamp = null;
            //int? maxItems = null;
            //var response = instance.GetPaymentsForDebitNote(debitNoteId, afterTimestamp, maxItems);
            //Assert.IsType<List<Payment>> (response, "response is List<Payment>");
        }
        
        /// <summary>
        /// Test GetPaymentsForInvoice
        /// </summary>
        [Fact]
        public void GetPaymentsForInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invoiceId = null;
            //DateTime? afterTimestamp = null;
            //int? maxItems = null;
            //var response = instance.GetPaymentsForInvoice(invoiceId, afterTimestamp, maxItems);
            //Assert.IsType<List<Payment>> (response, "response is List<Payment>");
        }
        
        /// <summary>
        /// Test GetRequestorAccounts
        /// </summary>
        [Fact]
        public void GetRequestorAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRequestorAccounts();
            //Assert.IsType<List<Account>> (response, "response is List<Account>");
        }
        
        /// <summary>
        /// Test IssueInvoice
        /// </summary>
        [Fact]
        public void IssueInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Invoice invoice = null;
            //var response = instance.IssueInvoice(invoice);
            //Assert.IsType<Invoice> (response, "response is Invoice");
        }
        
        /// <summary>
        /// Test RejectDebitNote
        /// </summary>
        [Fact]
        public void RejectDebitNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string debitNoteId = null;
            //Rejection rejection = null;
            //float? timeout = null;
            //instance.RejectDebitNote(debitNoteId, rejection, timeout);
            
        }
        
        /// <summary>
        /// Test RejectInvoice
        /// </summary>
        [Fact]
        public void RejectInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invoiceId = null;
            //Rejection rejection = null;
            //float? timeout = null;
            //instance.RejectInvoice(invoiceId, rejection, timeout);
            
        }
        
        /// <summary>
        /// Test ReleaseAllocation
        /// </summary>
        [Fact]
        public void ReleaseAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string allocationId = null;
            //instance.ReleaseAllocation(allocationId);
            
        }
        
    }

}

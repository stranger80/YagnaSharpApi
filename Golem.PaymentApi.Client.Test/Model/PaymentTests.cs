/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Golem.PaymentApi.Client.Api;
using Golem.PaymentApi.Client.Model;
using Golem.PaymentApi.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Golem.PaymentApi.Client.Test
{
    /// <summary>
    ///  Class for testing Payment
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class PaymentTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Payment
        //private Payment instance;

        public PaymentTests()
        {
            // TODO uncomment below to create an instance of Payment
            //instance = new Payment();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Payment
        /// </summary>
        [Fact]
        public void PaymentInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Payment
            //Assert.IsInstanceOfType<Payment> (instance, "variable 'instance' is a Payment");
        }


        /// <summary>
        /// Test the property 'PaymentId'
        /// </summary>
        [Fact]
        public void PaymentIdTest()
        {
            // TODO unit test for the property 'PaymentId'
        }
        /// <summary>
        /// Test the property 'PayerId'
        /// </summary>
        [Fact]
        public void PayerIdTest()
        {
            // TODO unit test for the property 'PayerId'
        }
        /// <summary>
        /// Test the property 'PayeeId'
        /// </summary>
        [Fact]
        public void PayeeIdTest()
        {
            // TODO unit test for the property 'PayeeId'
        }
        /// <summary>
        /// Test the property 'PayerAddr'
        /// </summary>
        [Fact]
        public void PayerAddrTest()
        {
            // TODO unit test for the property 'PayerAddr'
        }
        /// <summary>
        /// Test the property 'PayeeAddr'
        /// </summary>
        [Fact]
        public void PayeeAddrTest()
        {
            // TODO unit test for the property 'PayeeAddr'
        }
        /// <summary>
        /// Test the property 'PaymentPlatform'
        /// </summary>
        [Fact]
        public void PaymentPlatformTest()
        {
            // TODO unit test for the property 'PaymentPlatform'
        }
        /// <summary>
        /// Test the property 'Amount'
        /// </summary>
        [Fact]
        public void AmountTest()
        {
            // TODO unit test for the property 'Amount'
        }
        /// <summary>
        /// Test the property 'Timestamp'
        /// </summary>
        [Fact]
        public void TimestampTest()
        {
            // TODO unit test for the property 'Timestamp'
        }
        /// <summary>
        /// Test the property 'AgreementPayments'
        /// </summary>
        [Fact]
        public void AgreementPaymentsTest()
        {
            // TODO unit test for the property 'AgreementPayments'
        }
        /// <summary>
        /// Test the property 'ActivityPayments'
        /// </summary>
        [Fact]
        public void ActivityPaymentsTest()
        {
            // TODO unit test for the property 'ActivityPayments'
        }
        /// <summary>
        /// Test the property 'Details'
        /// </summary>
        [Fact]
        public void DetailsTest()
        {
            // TODO unit test for the property 'Details'
        }

    }

}

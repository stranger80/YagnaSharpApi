/* 
 * Yagna Payment API
 *
 *  Invoicing and Payments is a fundamental area of Yagna Ecosystem functionality. It includes aspects of communication between Requestor, Provider and a selected Payment Platform, which becomes crucial when Activities are executed in the context of negotiated Agreements. Yagna applications must be able to exercise various payment models, and the Invoicing/Payment-related communication is happening in parallel to Activity control communication. To define functional patterns of Requestor/Provider interaction in this area, Payment API is specified.  An important principle of the Yagna Payment API is that the actual payment transactions are hidden behind the Invoice flow. In other words, a Yagna Application on Requestor side isn’t expected to trigger actual payment transactions. Instead it is expected to receive and accept Invoices raised by the Provider - based on Application’s Invoice Accept notifications, the Payment API implementation orchestrates the payment via a configured Payment platform.  **NOTE: This specification is work-in-progress.** 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Golem.PaymentApi.Client.Api;
using Golem.PaymentApi.Client.Model;
using Golem.PaymentApi.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Golem.PaymentApi.Client.Test
{
    /// <summary>
    ///  Class for testing DebitNoteEvent
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DebitNoteEventTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DebitNoteEvent
        //private DebitNoteEvent instance;

        public DebitNoteEventTests()
        {
            // TODO uncomment below to create an instance of DebitNoteEvent
            //instance = new DebitNoteEvent();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DebitNoteEvent
        /// </summary>
        [Fact]
        public void DebitNoteEventInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" DebitNoteEvent
            //Assert.IsInstanceOfType<DebitNoteEvent> (instance, "variable 'instance' is a DebitNoteEvent");
        }

        /// <summary>
        /// Test deserialize a DebitNoteRejectedEvent from type DebitNoteEvent
        /// </summary>
        [Fact]
        public void DebitNoteRejectedEventDeserializeFromDebitNoteEventTest()
        {
            // TODO uncomment below to test deserialize a DebitNoteRejectedEvent from type DebitNoteEvent
            //Assert.IsInstanceOf<DebitNoteEvent>(JsonConvert.DeserializeObject<DebitNoteEvent>(new DebitNoteRejectedEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DebitNoteAcceptedEvent from type DebitNoteEvent
        /// </summary>
        [Fact]
        public void DebitNoteAcceptedEventDeserializeFromDebitNoteEventTest()
        {
            // TODO uncomment below to test deserialize a DebitNoteAcceptedEvent from type DebitNoteEvent
            //Assert.IsInstanceOf<DebitNoteEvent>(JsonConvert.DeserializeObject<DebitNoteEvent>(new DebitNoteAcceptedEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DebitNoteCancelledEvent from type DebitNoteEvent
        /// </summary>
        [Fact]
        public void DebitNoteCancelledEventDeserializeFromDebitNoteEventTest()
        {
            // TODO uncomment below to test deserialize a DebitNoteCancelledEvent from type DebitNoteEvent
            //Assert.IsInstanceOf<DebitNoteEvent>(JsonConvert.DeserializeObject<DebitNoteEvent>(new DebitNoteCancelledEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DebitNoteFailedEvent from type DebitNoteEvent
        /// </summary>
        [Fact]
        public void DebitNoteFailedEventDeserializeFromDebitNoteEventTest()
        {
            // TODO uncomment below to test deserialize a DebitNoteFailedEvent from type DebitNoteEvent
            //Assert.IsInstanceOf<DebitNoteEvent>(JsonConvert.DeserializeObject<DebitNoteEvent>(new DebitNoteFailedEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DebitNoteReceivedEvent from type DebitNoteEvent
        /// </summary>
        [Fact]
        public void DebitNoteReceivedEventDeserializeFromDebitNoteEventTest()
        {
            // TODO uncomment below to test deserialize a DebitNoteReceivedEvent from type DebitNoteEvent
            //Assert.IsInstanceOf<DebitNoteEvent>(JsonConvert.DeserializeObject<DebitNoteEvent>(new DebitNoteReceivedEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DebitNoteSettledEvent from type DebitNoteEvent
        /// </summary>
        [Fact]
        public void DebitNoteSettledEventDeserializeFromDebitNoteEventTest()
        {
            // TODO uncomment below to test deserialize a DebitNoteSettledEvent from type DebitNoteEvent
            //Assert.IsInstanceOf<DebitNoteEvent>(JsonConvert.DeserializeObject<DebitNoteEvent>(new DebitNoteSettledEvent().ToJson()));
        }

        /// <summary>
        /// Test the property 'EventType'
        /// </summary>
        [Fact]
        public void EventTypeTest()
        {
            // TODO unit test for the property 'EventType'
        }
        /// <summary>
        /// Test the property 'EventDate'
        /// </summary>
        [Fact]
        public void EventDateTest()
        {
            // TODO unit test for the property 'EventDate'
        }

    }

}

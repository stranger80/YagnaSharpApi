/* 
 * Yagna Activity API
 *
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.ActivityApi.Client.Client.OpenAPIDateConverter;

namespace Golem.ActivityApi.Client.Model
{
    /// <summary>
    /// FileSet
    /// </summary>
    [DataContract]
    public partial class FileSet :  IEquatable<FileSet>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileSet" /> class.
        /// </summary>
        /// <param name="desc">desc.</param>
        /// <param name="includes">includes.</param>
        /// <param name="excludes">excludes.</param>
        public FileSet(string desc = default(string), List<string> includes = default(List<string>), List<string> excludes = default(List<string>))
        {
            this.Desc = desc;
            this.Includes = includes;
            this.Excludes = excludes;
        }
        
        /// <summary>
        /// Gets or Sets Desc
        /// </summary>
        [DataMember(Name="desc", EmitDefaultValue=false)]
        public string Desc { get; set; }

        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name="includes", EmitDefaultValue=false)]
        public List<string> Includes { get; set; }

        /// <summary>
        /// Gets or Sets Excludes
        /// </summary>
        [DataMember(Name="excludes", EmitDefaultValue=false)]
        public List<string> Excludes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileSet {\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  Excludes: ").Append(Excludes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileSet);
        }

        /// <summary>
        /// Returns true if FileSet instances are equal
        /// </summary>
        /// <param name="input">Instance of FileSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.Includes == input.Includes ||
                    this.Includes != null &&
                    input.Includes != null &&
                    this.Includes.SequenceEqual(input.Includes)
                ) && 
                (
                    this.Excludes == input.Excludes ||
                    this.Excludes != null &&
                    input.Excludes != null &&
                    this.Excludes.SequenceEqual(input.Excludes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Desc != null)
                    hashCode = hashCode * 59 + this.Desc.GetHashCode();
                if (this.Includes != null)
                    hashCode = hashCode * 59 + this.Includes.GetHashCode();
                if (this.Excludes != null)
                    hashCode = hashCode * 59 + this.Excludes.GetHashCode();
                return hashCode;
            }
        }

    }

}

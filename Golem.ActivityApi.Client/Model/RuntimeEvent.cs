/* 
 * Yagna Activity API
 *
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.ActivityApi.Client.Model
{
    /// <summary>
    ///  Structure returned as data element of event stream. 
    /// </summary>
    [DataContract]
    public partial class RuntimeEvent :  IEquatable<RuntimeEvent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RuntimeEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeEvent" /> class.
        /// </summary>
        /// <param name="batchId">batchId (required).</param>
        /// <param name="index">index (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="kind">kind (required).</param>
        public RuntimeEvent(string batchId = default(string), int index = default(int), string timestamp = default(string), Object kind = default(Object))
        {
            // to ensure "batchId" is required (not null)
            this.BatchId = batchId ?? throw new ArgumentNullException("batchId is a required property for RuntimeEvent and cannot be null");;
            this.Index = index;
            // to ensure "timestamp" is required (not null)
            this.Timestamp = timestamp ?? throw new ArgumentNullException("timestamp is a required property for RuntimeEvent and cannot be null");;
            // to ensure "kind" is required (not null)
            this.Kind = kind ?? throw new ArgumentNullException("kind is a required property for RuntimeEvent and cannot be null");;
        }
        
        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name="batchId", EmitDefaultValue=false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public Object Kind { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuntimeEvent {\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuntimeEvent);
        }

        /// <summary>
        /// Returns true if RuntimeEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of RuntimeEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Yagna Activity API
 *
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.ActivityApi.Client.Model
{
    /// <summary>
    /// ExeScriptCommandResult
    /// </summary>
    [DataContract]
    public partial class ExeScriptCommandResult :  IEquatable<ExeScriptCommandResult>
    {
        /// <summary>
        /// Defines Result
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum Ok for value: Ok
            /// </summary>
            [EnumMember(Value = "Ok")]
            Ok = 1,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 2

        }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public ResultEnum Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExeScriptCommandResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExeScriptCommandResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExeScriptCommandResult" /> class.
        /// </summary>
        /// <param name="index">index (required).</param>
        /// <param name="eventDate">eventDate (required).</param>
        /// <param name="result">result (required).</param>
        /// <param name="stdout">stdout.</param>
        /// <param name="stderr">stderr.</param>
        /// <param name="message">message.</param>
        /// <param name="isBatchFinished">isBatchFinished.</param>
        public ExeScriptCommandResult(int index = default(int), DateTime eventDate = default(DateTime), ResultEnum result = default(ResultEnum), string stdout = default(string), string stderr = default(string), string message = default(string), bool isBatchFinished = default(bool))
        {
            this.Index = index;
            this.EventDate = eventDate;
            this.Result = result;
            this.Stdout = stdout;
            this.Stderr = stderr;
            this.Message = message;
            this.IsBatchFinished = isBatchFinished;
        }
        
        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name="eventDate", EmitDefaultValue=false)]
        public DateTime EventDate { get; set; }

        /// <summary>
        /// Gets or Sets Stdout
        /// </summary>
        [DataMember(Name="stdout", EmitDefaultValue=false)]
        public string Stdout { get; set; }

        /// <summary>
        /// Gets or Sets Stderr
        /// </summary>
        [DataMember(Name="stderr", EmitDefaultValue=false)]
        public string Stderr { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets IsBatchFinished
        /// </summary>
        [DataMember(Name="isBatchFinished", EmitDefaultValue=false)]
        public bool IsBatchFinished { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExeScriptCommandResult {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Stdout: ").Append(Stdout).Append("\n");
            sb.Append("  Stderr: ").Append(Stderr).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsBatchFinished: ").Append(IsBatchFinished).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExeScriptCommandResult);
        }

        /// <summary>
        /// Returns true if ExeScriptCommandResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ExeScriptCommandResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExeScriptCommandResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.Stdout == input.Stdout ||
                    (this.Stdout != null &&
                    this.Stdout.Equals(input.Stdout))
                ) && 
                (
                    this.Stderr == input.Stderr ||
                    (this.Stderr != null &&
                    this.Stderr.Equals(input.Stderr))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.IsBatchFinished == input.IsBatchFinished ||
                    this.IsBatchFinished.Equals(input.IsBatchFinished)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.EventDate != null)
                    hashCode = hashCode * 59 + this.EventDate.GetHashCode();
                hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Stdout != null)
                    hashCode = hashCode * 59 + this.Stdout.GetHashCode();
                if (this.Stderr != null)
                    hashCode = hashCode * 59 + this.Stderr.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                hashCode = hashCode * 59 + this.IsBatchFinished.GetHashCode();
                return hashCode;
            }
        }

    }

}

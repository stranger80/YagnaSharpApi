/* 
 * Yagna Activity API
 *
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.ActivityApi.Client.Model
{
    /// <summary>
    /// ActivityState
    /// </summary>
    [DataContract]
    public partial class ActivityState :  IEquatable<ActivityState>
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 1,

            /// <summary>
            /// Enum Initialized for value: Initialized
            /// </summary>
            [EnumMember(Value = "Initialized")]
            Initialized = 2,

            /// <summary>
            /// Enum Deployed for value: Deployed
            /// </summary>
            [EnumMember(Value = "Deployed")]
            Deployed = 3,

            /// <summary>
            /// Enum Ready for value: Ready
            /// </summary>
            [EnumMember(Value = "Ready")]
            Ready = 4,

            /// <summary>
            /// Enum Unresponsive for value: Unresponsive
            /// </summary>
            [EnumMember(Value = "Unresponsive")]
            Unresponsive = 5,

            /// <summary>
            /// Enum Terminated for value: Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            Terminated = 6

        }


        /// <summary>
        /// State pair tuple (CurrentState, NextState). NextState is equal to null if there is no pending transition between states.
        /// </summary>
        /// <value>State pair tuple (CurrentState, NextState). NextState is equal to null if there is no pending transition between states.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public List<StateEnum> State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivityState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityState" /> class.
        /// </summary>
        /// <param name="state">State pair tuple (CurrentState, NextState). NextState is equal to null if there is no pending transition between states. (required).</param>
        /// <param name="reason">Reason for Activity termination (specified when Activity in Terminated state)..</param>
        /// <param name="errorMessage">If error caused state change - error message shall be provided..</param>
        public ActivityState(List<StateEnum> state = default(List<StateEnum>), string reason = default(string), string errorMessage = default(string))
        {
            // to ensure "state" is required (not null)
            this.State = state ?? throw new ArgumentNullException("state is a required property for ActivityState and cannot be null");;
            this.Reason = reason;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Reason for Activity termination (specified when Activity in Terminated state).
        /// </summary>
        /// <value>Reason for Activity termination (specified when Activity in Terminated state).</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// If error caused state change - error message shall be provided.
        /// </summary>
        /// <value>If error caused state change - error message shall be provided.</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityState {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityState);
        }

        /// <summary>
        /// Returns true if ActivityState instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.State == input.State ||
                    this.State.SequenceEqual(input.State)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

    }

}

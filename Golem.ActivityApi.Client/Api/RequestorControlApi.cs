/* 
 * Yagna Activity API
 *
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Golem.ActivityApi.Client.Client;
using Golem.ActivityApi.Client.Model;

namespace Golem.ActivityApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestorControlApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sends encrypted command to secure exe-unit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CallEncrypted (string activityId, System.IO.Stream body);

        /// <summary>
        /// Sends encrypted command to secure exe-unit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CallEncryptedWithHttpInfo (string activityId, System.IO.Stream body);
        /// <summary>
        /// Creates new Activity based on given Agreement.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>OneOfstringCreateActivityResult</returns>
        CreateActivityResult CreateActivity (CreateActivityRequest request);

        /// <summary>
        /// Creates new Activity based on given Agreement.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of OneOfstringCreateActivityResult</returns>
        ApiResponse<CreateActivityResult> CreateActivityWithHttpInfo (CreateActivityRequest request);
        /// <summary>
        /// Destroys given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns></returns>
        void DestroyActivity (string activityId);

        /// <summary>
        /// Destroys given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyActivityWithHttpInfo (string activityId);
        /// <summary>
        /// Executes an ExeScript batch within a given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed directly to ExeUnit.
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>string</returns>
        string Exec (string activityId, ExeScriptRequest script);

        /// <summary>
        /// Executes an ExeScript batch within a given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed directly to ExeUnit.
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExecWithHttpInfo (string activityId, ExeScriptRequest script);
        /// <summary>
        /// Queries for ExeScript batch results.
        /// </summary>
        /// <remarks>
        /// &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>List&lt;ExeScriptCommandResult&gt;</returns>
        List<ExeScriptCommandResult> GetExecBatchResults (string activityId, string batchId, decimal? commandIndex = default(decimal?));

        /// <summary>
        /// Queries for ExeScript batch results.
        /// </summary>
        /// <remarks>
        /// &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>ApiResponse of List&lt;ExeScriptCommandResult&gt;</returns>
        ApiResponse<List<ExeScriptCommandResult>> GetExecBatchResultsWithHttpInfo (string activityId, string batchId, decimal? commandIndex = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestorControlApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Sends encrypted command to secure exe-unit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CallEncryptedAsync (string activityId, System.IO.Stream body);

        /// <summary>
        /// Sends encrypted command to secure exe-unit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CallEncryptedAsyncWithHttpInfo (string activityId, System.IO.Stream body);
        /// <summary>
        /// Creates new Activity based on given Agreement.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementId"></param>
        /// <returns>Task of OneOfstringCreateActivityResult</returns>
        System.Threading.Tasks.Task<CreateActivityResult> CreateActivityAsync (CreateActivityRequest agreementId);

        /// <summary>
        /// Creates new Activity based on given Agreement.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementId"></param>
        /// <returns>Task of ApiResponse (OneOfstringCreateActivityResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateActivityResult>> CreateActivityAsyncWithHttpInfo (CreateActivityRequest agreementId);
        /// <summary>
        /// Destroys given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyActivityAsync (string activityId);

        /// <summary>
        /// Destroys given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyActivityAsyncWithHttpInfo (string activityId);
        /// <summary>
        /// Executes an ExeScript batch within a given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed directly to ExeUnit.
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExecAsync (string activityId, ExeScriptRequest script);

        /// <summary>
        /// Executes an ExeScript batch within a given Activity.
        /// </summary>
        /// <remarks>
        /// **Note:** This call shall get routed directly to ExeUnit.
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExecAsyncWithHttpInfo (string activityId, ExeScriptRequest script);
        /// <summary>
        /// Queries for ExeScript batch results.
        /// </summary>
        /// <remarks>
        /// &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>Task of List&lt;ExeScriptCommandResult&gt;</returns>
        System.Threading.Tasks.Task<List<ExeScriptCommandResult>> GetExecBatchResultsAsync (string activityId, string batchId, decimal? commandIndex = default(decimal?));

        /// <summary>
        /// Queries for ExeScript batch results.
        /// </summary>
        /// <remarks>
        /// &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExeScriptCommandResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExeScriptCommandResult>>> GetExecBatchResultsAsyncWithHttpInfo (string activityId, string batchId, decimal? commandIndex = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestorControlApi : IRequestorControlApiSync, IRequestorControlApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RequestorControlApi : IRequestorControlApi
    {
        private Golem.ActivityApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorControlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestorControlApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorControlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestorControlApi(String basePath)
        {
            this.Configuration = Golem.ActivityApi.Client.Client.Configuration.MergeConfigurations(
                Golem.ActivityApi.Client.Client.GlobalConfiguration.Instance,
                new Golem.ActivityApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Golem.ActivityApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorControlApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RequestorControlApi(Golem.ActivityApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Golem.ActivityApi.Client.Client.Configuration.MergeConfigurations(
                Golem.ActivityApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Golem.ActivityApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestorControlApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RequestorControlApi(Golem.ActivityApi.Client.Client.ISynchronousClient client,Golem.ActivityApi.Client.Client.IAsynchronousClient asyncClient, Golem.ActivityApi.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Golem.ActivityApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Golem.ActivityApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Golem.ActivityApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Golem.ActivityApi.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Golem.ActivityApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Sends encrypted command to secure exe-unit. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CallEncrypted (string activityId, System.IO.Stream body)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = CallEncryptedWithHttpInfo(activityId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sends encrypted command to secure exe-unit. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse< System.IO.Stream > CallEncryptedWithHttpInfo (string activityId, System.IO.Stream body)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->CallEncrypted");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'body' when calling RequestorControlApi->CallEncrypted");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< System.IO.Stream >("/activity/{activityId}/encrypted", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CallEncrypted", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends encrypted command to secure exe-unit. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CallEncryptedAsync (string activityId, System.IO.Stream body)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<System.IO.Stream> localVarResponse = await CallEncryptedAsyncWithHttpInfo(activityId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sends encrypted command to secure exe-unit. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<System.IO.Stream>> CallEncryptedAsyncWithHttpInfo (string activityId, System.IO.Stream body)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->CallEncrypted");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'body' when calling RequestorControlApi->CallEncrypted");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream",
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/activity/{activityId}/encrypted", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CallEncrypted", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new Activity based on given Agreement. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>OneOfstringCreateActivityResult</returns>
        public CreateActivityResult CreateActivity (CreateActivityRequest request)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<CreateActivityResult> localVarResponse = CreateActivityWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new Activity based on given Agreement. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementId"></param>
        /// <returns>ApiResponse of OneOfstringCreateActivityResult</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse<CreateActivityResult> CreateActivityWithHttpInfo (CreateActivityRequest request)
        {
            // verify the required parameter 'agreementId' is set
            if (request == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'request' when calling RequestorControlApi->CreateActivity");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = request;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateActivityResult >("/activity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateActivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new Activity based on given Agreement. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementId"></param>
        /// <returns>Task of OneOfstringCreateActivityResult</returns>
        public async System.Threading.Tasks.Task<CreateActivityResult> CreateActivityAsync (CreateActivityRequest request)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<CreateActivityResult> localVarResponse = await CreateActivityAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new Activity based on given Agreement. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agreementId"></param>
        /// <returns>Task of ApiResponse (OneOfstringCreateActivityResult)</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<CreateActivityResult>> CreateActivityAsyncWithHttpInfo (CreateActivityRequest request)
        {
            // verify the required parameter 'agreementId' is set
            if (request == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'request' when calling RequestorControlApi->CreateActivity");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = request;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateActivityResult>("/activity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateActivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys given Activity. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns></returns>
        public void DestroyActivity (string activityId)
        {
             DestroyActivityWithHttpInfo(activityId);
        }

        /// <summary>
        /// Destroys given Activity. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse<Object> DestroyActivityWithHttpInfo (string activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->DestroyActivity");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/activity/{activityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyActivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys given Activity. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyActivityAsync (string activityId)
        {
             await DestroyActivityAsyncWithHttpInfo(activityId);

        }

        /// <summary>
        /// Destroys given Activity. **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<Object>> DestroyActivityAsyncWithHttpInfo (string activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->DestroyActivity");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/activity/{activityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyActivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Executes an ExeScript batch within a given Activity. **Note:** This call shall get routed directly to ExeUnit.
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>string</returns>
        public string Exec (string activityId, ExeScriptRequest script)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<string> localVarResponse = ExecWithHttpInfo(activityId, script);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Executes an ExeScript batch within a given Activity. **Note:** This call shall get routed directly to ExeUnit.
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>ApiResponse of string</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse< string > ExecWithHttpInfo (string activityId, ExeScriptRequest script)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->Exec");

            // verify the required parameter 'script' is set
            if (script == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'script' when calling RequestorControlApi->Exec");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = script;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< string >("/activity/{activityId}/exec", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Exec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Executes an ExeScript batch within a given Activity. **Note:** This call shall get routed directly to ExeUnit.
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExecAsync (string activityId, ExeScriptRequest script)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<string> localVarResponse = await ExecAsyncWithHttpInfo(activityId, script);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Executes an ExeScript batch within a given Activity. **Note:** This call shall get routed directly to ExeUnit.
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="script"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<string>> ExecAsyncWithHttpInfo (string activityId, ExeScriptRequest script)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->Exec");

            // verify the required parameter 'script' is set
            if (script == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'script' when calling RequestorControlApi->Exec");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = script;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/activity/{activityId}/exec", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Exec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queries for ExeScript batch results. &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>List&lt;ExeScriptCommandResult&gt;</returns>
        public List<ExeScriptCommandResult> GetExecBatchResults (string activityId, string batchId, decimal? commandIndex = default(decimal?))
        {
             Golem.ActivityApi.Client.Client.ApiResponse<List<ExeScriptCommandResult>> localVarResponse = GetExecBatchResultsWithHttpInfo(activityId, batchId, commandIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries for ExeScript batch results. &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>ApiResponse of List&lt;ExeScriptCommandResult&gt;</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse< List<ExeScriptCommandResult> > GetExecBatchResultsWithHttpInfo (string activityId, string batchId, decimal? commandIndex = default(decimal?))
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->GetExecBatchResults");

            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'batchId' when calling RequestorControlApi->GetExecBatchResults");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            if (batchId != null)
                localVarRequestOptions.PathParameters.Add("batchId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (commandIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "commandIndex", commandIndex));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ExeScriptCommandResult> >("/activity/{activityId}/exec/{batchId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExecBatchResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Queries for ExeScript batch results. &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>Task of List&lt;ExeScriptCommandResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExeScriptCommandResult>> GetExecBatchResultsAsync (string activityId, string batchId, decimal? commandIndex = default(decimal?))
        {
             Golem.ActivityApi.Client.Client.ApiResponse<List<ExeScriptCommandResult>> localVarResponse = await GetExecBatchResultsAsyncWithHttpInfo(activityId, batchId, commandIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries for ExeScript batch results. &#39;This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn&#39;t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: &lt;RuntimeEvent structure&gt;      This streaming endpoint requires dedicated implementation. &#39; 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="batchId"></param>
        /// <param name="commandIndex">Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ExeScriptCommandResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<List<ExeScriptCommandResult>>> GetExecBatchResultsAsyncWithHttpInfo (string activityId, string batchId, decimal? commandIndex = default(decimal?))
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling RequestorControlApi->GetExecBatchResults");

            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'batchId' when calling RequestorControlApi->GetExecBatchResults");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            if (batchId != null)
                localVarRequestOptions.PathParameters.Add("batchId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (commandIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "commandIndex", commandIndex));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ExeScriptCommandResult>>("/activity/{activityId}/exec/{batchId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExecBatchResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/* 
 * Yagna Activity API
 *
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Golem.ActivityApi.Client.Client;
using Golem.ActivityApi.Client.Model;

namespace Golem.ActivityApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch Requestor command events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;ProviderEvent&gt;</returns>
        List<ProviderEvent> CollectActivityEvents (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?));

        /// <summary>
        /// Fetch Requestor command events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;ProviderEvent&gt;</returns>
        ApiResponse<List<ProviderEvent>> CollectActivityEventsWithHttpInfo (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?));
        /// <summary>
        /// Get state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ActivityState</returns>
        ActivityState GetActivityState (string activityId);

        /// <summary>
        /// Get state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ApiResponse of ActivityState</returns>
        ApiResponse<ActivityState> GetActivityStateWithHttpInfo (string activityId);
        /// <summary>
        /// Get usage of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ActivityUsage</returns>
        ActivityUsage GetActivityUsage (string activityId);

        /// <summary>
        /// Get usage of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ApiResponse of ActivityUsage</returns>
        ApiResponse<ActivityUsage> GetActivityUsageWithHttpInfo (string activityId);
        /// <summary>
        /// Set state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns></returns>
        void SetActivityState (string activityId, ActivityState activityState);

        /// <summary>
        /// Set state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetActivityStateWithHttpInfo (string activityId, ActivityState activityState);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetch Requestor command events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;ProviderEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ProviderEvent>> CollectActivityEventsAsync (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?));

        /// <summary>
        /// Fetch Requestor command events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;ProviderEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProviderEvent>>> CollectActivityEventsAsyncWithHttpInfo (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?));
        /// <summary>
        /// Get state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ActivityState</returns>
        System.Threading.Tasks.Task<ActivityState> GetActivityStateAsync (string activityId);

        /// <summary>
        /// Get state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ApiResponse (ActivityState)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityState>> GetActivityStateAsyncWithHttpInfo (string activityId);
        /// <summary>
        /// Get usage of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ActivityUsage</returns>
        System.Threading.Tasks.Task<ActivityUsage> GetActivityUsageAsync (string activityId);

        /// <summary>
        /// Get usage of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ApiResponse (ActivityUsage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityUsage>> GetActivityUsageAsyncWithHttpInfo (string activityId);
        /// <summary>
        /// Set state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetActivityStateAsync (string activityId, ActivityState activityState);

        /// <summary>
        /// Set state of specified Activity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetActivityStateAsyncWithHttpInfo (string activityId, ActivityState activityState);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProviderApi : IProviderApiSync, IProviderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProviderApi : IProviderApi
    {
        private Golem.ActivityApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProviderApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProviderApi(String basePath)
        {
            this.Configuration = Golem.ActivityApi.Client.Client.Configuration.MergeConfigurations(
                Golem.ActivityApi.Client.Client.GlobalConfiguration.Instance,
                new Golem.ActivityApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Golem.ActivityApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProviderApi(Golem.ActivityApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Golem.ActivityApi.Client.Client.Configuration.MergeConfigurations(
                Golem.ActivityApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Golem.ActivityApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Golem.ActivityApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProviderApi(Golem.ActivityApi.Client.Client.ISynchronousClient client,Golem.ActivityApi.Client.Client.IAsynchronousClient asyncClient, Golem.ActivityApi.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Golem.ActivityApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Golem.ActivityApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Golem.ActivityApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Golem.ActivityApi.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Golem.ActivityApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetch Requestor command events. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>List&lt;ProviderEvent&gt;</returns>
        public List<ProviderEvent> CollectActivityEvents (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?))
        {
             Golem.ActivityApi.Client.Client.ApiResponse<List<ProviderEvent>> localVarResponse = CollectActivityEventsWithHttpInfo(appSessionId, afterTimestamp, timeout, maxEvents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Requestor command events. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;ProviderEvent&gt;</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse< List<ProviderEvent> > CollectActivityEventsWithHttpInfo (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?))
        {
            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ProviderEvent> >("/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectActivityEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Requestor command events. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of List&lt;ProviderEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProviderEvent>> CollectActivityEventsAsync (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?))
        {
             Golem.ActivityApi.Client.Client.ApiResponse<List<ProviderEvent>> localVarResponse = await CollectActivityEventsAsyncWithHttpInfo(appSessionId, afterTimestamp, timeout, maxEvents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch Requestor command events. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified (optional)</param>
        /// <param name="afterTimestamp">Apply only to records created later than the specified timestamp (optional)</param>
        /// <param name="timeout">Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)  (optional, default to 5.0F)</param>
        /// <param name="maxEvents">Maximum number of events that server should return at once.  (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;ProviderEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<List<ProviderEvent>>> CollectActivityEventsAsyncWithHttpInfo (string appSessionId = default(string), DateTime? afterTimestamp = default(DateTime?), float? timeout = default(float?), int? maxEvents = default(int?))
        {

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (appSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "appSessionId", appSessionId));
            }
            if (afterTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "afterTimestamp", afterTimestamp));
            }
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }
            if (maxEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(Golem.ActivityApi.Client.Client.ClientUtils.ParameterToMultiMap("", "maxEvents", maxEvents));
            }

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProviderEvent>>("/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectActivityEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ActivityState</returns>
        public ActivityState GetActivityState (string activityId)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<ActivityState> localVarResponse = GetActivityStateWithHttpInfo(activityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ApiResponse of ActivityState</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse< ActivityState > GetActivityStateWithHttpInfo (string activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling ProviderApi->GetActivityState");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ActivityState >("/activity/{activityId}/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ActivityState</returns>
        public async System.Threading.Tasks.Task<ActivityState> GetActivityStateAsync (string activityId)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<ActivityState> localVarResponse = await GetActivityStateAsyncWithHttpInfo(activityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ApiResponse (ActivityState)</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<ActivityState>> GetActivityStateAsyncWithHttpInfo (string activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling ProviderApi->GetActivityState");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActivityState>("/activity/{activityId}/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get usage of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ActivityUsage</returns>
        public ActivityUsage GetActivityUsage (string activityId)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<ActivityUsage> localVarResponse = GetActivityUsageWithHttpInfo(activityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get usage of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>ApiResponse of ActivityUsage</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse< ActivityUsage > GetActivityUsageWithHttpInfo (string activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling ProviderApi->GetActivityUsage");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ActivityUsage >("/activity/{activityId}/usage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get usage of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ActivityUsage</returns>
        public async System.Threading.Tasks.Task<ActivityUsage> GetActivityUsageAsync (string activityId)
        {
             Golem.ActivityApi.Client.Client.ApiResponse<ActivityUsage> localVarResponse = await GetActivityUsageAsyncWithHttpInfo(activityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get usage of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <returns>Task of ApiResponse (ActivityUsage)</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<ActivityUsage>> GetActivityUsageAsyncWithHttpInfo (string activityId)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling ProviderApi->GetActivityUsage");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActivityUsage>("/activity/{activityId}/usage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns></returns>
        public void SetActivityState (string activityId, ActivityState activityState)
        {
             SetActivityStateWithHttpInfo(activityId, activityState);
        }

        /// <summary>
        /// Set state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Golem.ActivityApi.Client.Client.ApiResponse<Object> SetActivityStateWithHttpInfo (string activityId, ActivityState activityState)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling ProviderApi->SetActivityState");

            // verify the required parameter 'activityState' is set
            if (activityState == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityState' when calling ProviderApi->SetActivityState");

            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Golem.ActivityApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = activityState;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/activity/{activityId}/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActivityState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetActivityStateAsync (string activityId, ActivityState activityState)
        {
             await SetActivityStateAsyncWithHttpInfo(activityId, activityState);

        }

        /// <summary>
        /// Set state of specified Activity. 
        /// </summary>
        /// <exception cref="Golem.ActivityApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="activityState"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Golem.ActivityApi.Client.Client.ApiResponse<Object>> SetActivityStateAsyncWithHttpInfo (string activityId, ActivityState activityState)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityId' when calling ProviderApi->SetActivityState");

            // verify the required parameter 'activityState' is set
            if (activityState == null)
                throw new Golem.ActivityApi.Client.Client.ApiException(400, "Missing required parameter 'activityState' when calling ProviderApi->SetActivityState");


            Golem.ActivityApi.Client.Client.RequestOptions localVarRequestOptions = new Golem.ActivityApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (activityId != null)
                localVarRequestOptions.PathParameters.Add("activityId", Golem.ActivityApi.Client.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = activityState;

            // authentication (app_key) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Golem.ActivityApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/activity/{activityId}/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActivityState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

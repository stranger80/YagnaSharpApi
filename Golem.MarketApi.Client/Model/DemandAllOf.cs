/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.MarketApi.Client.Model
{
    /// <summary>
    /// DemandAllOf
    /// </summary>
    [DataContract]
    public partial class DemandAllOf :  IEquatable<DemandAllOf>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DemandAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DemandAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DemandAllOf" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        public DemandAllOf(DateTime timestamp = default(DateTime))
        {
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets DemandId
        /// </summary>
        [DataMember(Name="demandId", EmitDefaultValue=false)]
        public string DemandId { get; private set; }

        /// <summary>
        /// Gets or Sets RequestorId
        /// </summary>
        [DataMember(Name="requestorId", EmitDefaultValue=false)]
        public string RequestorId { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DemandAllOf {\n");
            sb.Append("  DemandId: ").Append(DemandId).Append("\n");
            sb.Append("  RequestorId: ").Append(RequestorId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DemandAllOf);
        }

        /// <summary>
        /// Returns true if DemandAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DemandAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DemandAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DemandId == input.DemandId ||
                    (this.DemandId != null &&
                    this.DemandId.Equals(input.DemandId))
                ) && 
                (
                    this.RequestorId == input.RequestorId ||
                    (this.RequestorId != null &&
                    this.RequestorId.Equals(input.RequestorId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DemandId != null)
                    hashCode = hashCode * 59 + this.DemandId.GetHashCode();
                if (this.RequestorId != null)
                    hashCode = hashCode * 59 + this.RequestorId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

    }

}

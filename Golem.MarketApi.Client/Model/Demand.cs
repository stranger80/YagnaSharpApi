/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.Common.Client.Client.OpenAPIDateConverter;

namespace Golem.MarketApi.Client.Model
{
    /// <summary>
    /// Demand
    /// </summary>
    [DataContract]
    public partial class Demand : DemandOfferBase,  IEquatable<Demand>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Demand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Demand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Demand" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="properties">The object which includes all the Demand/Offer/Proposal properties. This is a JSON object in \&quot;flat convention\&quot; - where keys are full property names and their values indicate properties.  The value&#39;s Javascript type shall conform with the type of the property (as indicated in Golem Standards). ### Example property object: &#x60;&#x60;&#x60; {   \&quot;golem.com.pricing.model\&quot;:\&quot;linear\&quot;,   \&quot;golem.com.pricing.model.linear.coeffs\&quot;:[0.001, 0.002, 0.0],   \&quot;golem.com.scheme\&quot;:\&quot;payu\&quot;,   \&quot;golem.com.scheme.payu.interval_sec\&quot;:6.0,   \&quot;golem.com.usage.vector\&quot;:[\&quot;golem.usage.duration_sec\&quot;,\&quot;golem.usage.cpu_sec\&quot;],   \&quot;golem.inf.cpu.architecture\&quot;:\&quot;x86_64\&quot;,   \&quot;golem.inf.cpu.cores\&quot;:4,   \&quot;golem.inf.cpu.threads\&quot;:7,   \&quot;golem.inf.mem.gib\&quot;:10.612468048930168,   \&quot;golem.inf.storage.gib\&quot;:81.7227783203125,   \&quot;golem.node.debug.subnet\&quot;:\&quot;market-devnet\&quot;,   \&quot;golem.node.id.name\&quot;:\&quot;tworec@mf-market-devnet\&quot;,   \&quot;golem.runtime.name\&quot;:\&quot;vm\&quot;,   \&quot;golem.runtime.version@v\&quot;:\&quot;0.1.0\&quot; } &#x60;&#x60;&#x60;  (required).</param>
        /// <param name="constraints">constraints (required).</param>
        public Demand(DateTime timestamp = default(DateTime), Object properties = default(Object), string constraints = default(string)) : base(properties, constraints)
        {
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets DemandId
        /// </summary>
        [DataMember(Name="demandId", EmitDefaultValue=false)]
        public string DemandId { get; private set; }

        /// <summary>
        /// Gets or Sets RequestorId
        /// </summary>
        [DataMember(Name="requestorId", EmitDefaultValue=false)]
        public string RequestorId { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Demand {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DemandId: ").Append(DemandId).Append("\n");
            sb.Append("  RequestorId: ").Append(RequestorId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Demand);
        }

        /// <summary>
        /// Returns true if Demand instances are equal
        /// </summary>
        /// <param name="input">Instance of Demand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Demand input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DemandId == input.DemandId ||
                    (this.DemandId != null &&
                    this.DemandId.Equals(input.DemandId))
                ) && base.Equals(input) && 
                (
                    this.RequestorId == input.RequestorId ||
                    (this.RequestorId != null &&
                    this.RequestorId.Equals(input.RequestorId))
                ) && base.Equals(input) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DemandId != null)
                    hashCode = hashCode * 59 + this.DemandId.GetHashCode();
                if (this.RequestorId != null)
                    hashCode = hashCode * 59 + this.RequestorId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

    }

}

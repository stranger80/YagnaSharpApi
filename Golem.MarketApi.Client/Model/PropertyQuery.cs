/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.MarketApi.Client.Client.OpenAPIDateConverter;

namespace Golem.MarketApi.Client.Model
{
    /// <summary>
    /// PropertyQuery
    /// </summary>
    [DataContract]
    public partial class PropertyQuery :  IEquatable<PropertyQuery>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertyQuery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyQuery" /> class.
        /// </summary>
        /// <param name="issuerProperties">issuerProperties.</param>
        /// <param name="queryId">queryId.</param>
        /// <param name="queriedProperties">queriedProperties (required).</param>
        public PropertyQuery(Object issuerProperties = default(Object), string queryId = default(string), List<string> queriedProperties = default(List<string>))
        {
            // to ensure "queriedProperties" is required (not null)
            this.QueriedProperties = queriedProperties ?? throw new ArgumentNullException("queriedProperties is a required property for PropertyQuery and cannot be null");;
            this.IssuerProperties = issuerProperties;
            this.QueryId = queryId;
        }
        
        /// <summary>
        /// Gets or Sets IssuerProperties
        /// </summary>
        [DataMember(Name="issuerProperties", EmitDefaultValue=false)]
        public Object IssuerProperties { get; set; }

        /// <summary>
        /// Gets or Sets QueryId
        /// </summary>
        [DataMember(Name="queryId", EmitDefaultValue=false)]
        public string QueryId { get; set; }

        /// <summary>
        /// Gets or Sets QueriedProperties
        /// </summary>
        [DataMember(Name="queriedProperties", EmitDefaultValue=false)]
        public List<string> QueriedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertyQuery {\n");
            sb.Append("  IssuerProperties: ").Append(IssuerProperties).Append("\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  QueriedProperties: ").Append(QueriedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyQuery);
        }

        /// <summary>
        /// Returns true if PropertyQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IssuerProperties == input.IssuerProperties ||
                    (this.IssuerProperties != null &&
                    this.IssuerProperties.Equals(input.IssuerProperties))
                ) && 
                (
                    this.QueryId == input.QueryId ||
                    (this.QueryId != null &&
                    this.QueryId.Equals(input.QueryId))
                ) && 
                (
                    this.QueriedProperties == input.QueriedProperties ||
                    this.QueriedProperties != null &&
                    input.QueriedProperties != null &&
                    this.QueriedProperties.SequenceEqual(input.QueriedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssuerProperties != null)
                    hashCode = hashCode * 59 + this.IssuerProperties.GetHashCode();
                if (this.QueryId != null)
                    hashCode = hashCode * 59 + this.QueryId.GetHashCode();
                if (this.QueriedProperties != null)
                    hashCode = hashCode * 59 + this.QueriedProperties.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.MarketApi.Client.Client.OpenAPIDateConverter;

namespace Golem.MarketApi.Client.Model
{
    /// <summary>
    /// ProposalAllOf
    /// </summary>
    [DataContract]
    public partial class ProposalAllOf :  IEquatable<ProposalAllOf>
    {
        /// <summary>
        /// * &#x60;Initial&#x60; - proposal arrived from the market as response to subscription * &#x60;Draft&#x60; - bespoke counter-proposal issued by one party directly to other party (negotiation phase) * &#x60;Rejected&#x60; by other party * &#x60;Accepted&#x60; - promoted into the Agreement draft * &#x60;Expired&#x60; - not accepted nor rejected before validity period 
        /// </summary>
        /// <value>* &#x60;Initial&#x60; - proposal arrived from the market as response to subscription * &#x60;Draft&#x60; - bespoke counter-proposal issued by one party directly to other party (negotiation phase) * &#x60;Rejected&#x60; by other party * &#x60;Accepted&#x60; - promoted into the Agreement draft * &#x60;Expired&#x60; - not accepted nor rejected before validity period </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Initial for value: Initial
            /// </summary>
            [EnumMember(Value = "Initial")]
            Initial = 1,

            /// <summary>
            /// Enum Draft for value: Draft
            /// </summary>
            [EnumMember(Value = "Draft")]
            Draft = 2,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 3,

            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 4,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 5

        }

        /// <summary>
        /// * &#x60;Initial&#x60; - proposal arrived from the market as response to subscription * &#x60;Draft&#x60; - bespoke counter-proposal issued by one party directly to other party (negotiation phase) * &#x60;Rejected&#x60; by other party * &#x60;Accepted&#x60; - promoted into the Agreement draft * &#x60;Expired&#x60; - not accepted nor rejected before validity period 
        /// </summary>
        /// <value>* &#x60;Initial&#x60; - proposal arrived from the market as response to subscription * &#x60;Draft&#x60; - bespoke counter-proposal issued by one party directly to other party (negotiation phase) * &#x60;Rejected&#x60; by other party * &#x60;Accepted&#x60; - promoted into the Agreement draft * &#x60;Expired&#x60; - not accepted nor rejected before validity period </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProposalAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProposalAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProposalAllOf" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="prevProposalId">id of the proposal from other side which this proposal responds to .</param>
        public ProposalAllOf(DateTime timestamp = default(DateTime), string prevProposalId = default(string))
        {
            this.Timestamp = timestamp;
            this.PrevProposalId = prevProposalId;
        }
        
        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name="proposalId", EmitDefaultValue=false)]
        public string ProposalId { get; private set; }

        /// <summary>
        /// Gets or Sets IssuerId
        /// </summary>
        [DataMember(Name="issuerId", EmitDefaultValue=false)]
        public string IssuerId { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// id of the proposal from other side which this proposal responds to 
        /// </summary>
        /// <value>id of the proposal from other side which this proposal responds to </value>
        [DataMember(Name="prevProposalId", EmitDefaultValue=false)]
        public string PrevProposalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProposalAllOf {\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  PrevProposalId: ").Append(PrevProposalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProposalAllOf);
        }

        /// <summary>
        /// Returns true if ProposalAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProposalAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProposalAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProposalId == input.ProposalId ||
                    (this.ProposalId != null &&
                    this.ProposalId.Equals(input.ProposalId))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.PrevProposalId == input.PrevProposalId ||
                    (this.PrevProposalId != null &&
                    this.PrevProposalId.Equals(input.PrevProposalId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProposalId != null)
                    hashCode = hashCode * 59 + this.ProposalId.GetHashCode();
                if (this.IssuerId != null)
                    hashCode = hashCode * 59 + this.IssuerId.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.PrevProposalId != null)
                    hashCode = hashCode * 59 + this.PrevProposalId.GetHashCode();
                return hashCode;
            }
        }

    }

}

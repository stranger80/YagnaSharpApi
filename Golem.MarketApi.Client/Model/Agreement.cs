/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.MarketApi.Client.Client.OpenAPIDateConverter;

namespace Golem.MarketApi.Client.Model
{
    /// <summary>
    /// Agreement
    /// </summary>
    [DataContract]
    public partial class Agreement :  IEquatable<Agreement>
    {
        /// <summary>
        /// * &#x60;Proposal&#x60; - newly created by a Requestor (draft based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not approved, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. 
        /// </summary>
        /// <value>* &#x60;Proposal&#x60; - newly created by a Requestor (draft based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not approved, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Proposal for value: Proposal
            /// </summary>
            [EnumMember(Value = "Proposal")]
            Proposal = 1,

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 3,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 4,

            /// <summary>
            /// Enum Approved for value: Approved
            /// </summary>
            [EnumMember(Value = "Approved")]
            Approved = 5,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 6,

            /// <summary>
            /// Enum Terminated for value: Terminated
            /// </summary>
            [EnumMember(Value = "Terminated")]
            Terminated = 7

        }

        /// <summary>
        /// * &#x60;Proposal&#x60; - newly created by a Requestor (draft based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not approved, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. 
        /// </summary>
        /// <value>* &#x60;Proposal&#x60; - newly created by a Requestor (draft based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not approved, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval. </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Agreement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Agreement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Agreement" /> class.
        /// </summary>
        /// <param name="agreementId">agreementId (required).</param>
        /// <param name="demand">demand (required).</param>
        /// <param name="offer">offer (required).</param>
        /// <param name="validTo">End of validity period.  Agreement needs to be approved, rejected or cancelled before this date; otherwise will expire.  (required).</param>
        /// <param name="approvedDate">Agreement approval timestamp.</param>
        /// <param name="state">* &#x60;Proposal&#x60; - newly created by a Requestor (draft based on Proposal) * &#x60;Pending&#x60; - confirmed by a Requestor and send to Provider for approval * &#x60;Cancelled&#x60; by a Requestor * &#x60;Rejected&#x60; by a Provider * &#x60;Approved&#x60; by both sides * &#x60;Expired&#x60; - not approved, rejected nor cancelled within validity period * &#x60;Terminated&#x60; - finished after approval.  (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="appSessionId">A correlation/session identifier used for querying events related to an action where this appSessionId has been specified. .</param>
        /// <param name="proposedSignature">proposedSignature.</param>
        /// <param name="approvedSignature">approvedSignature.</param>
        /// <param name="committedSignature">committedSignature.</param>
        public Agreement(string agreementId = default(string), Demand demand = default(Demand), Offer offer = default(Offer), DateTime validTo = default(DateTime), DateTime approvedDate = default(DateTime), StateEnum state = default(StateEnum), DateTime timestamp = default(DateTime), string appSessionId = default(string), string proposedSignature = default(string), string approvedSignature = default(string), string committedSignature = default(string))
        {
            // to ensure "agreementId" is required (not null)
            this.AgreementId = agreementId ?? throw new ArgumentNullException("agreementId is a required property for Agreement and cannot be null");;
            // to ensure "demand" is required (not null)
            this.Demand = demand ?? throw new ArgumentNullException("demand is a required property for Agreement and cannot be null");;
            // to ensure "offer" is required (not null)
            this.Offer = offer ?? throw new ArgumentNullException("offer is a required property for Agreement and cannot be null");;
            this.ValidTo = validTo;
            this.State = state;
            this.Timestamp = timestamp;
            this.ApprovedDate = approvedDate;
            this.AppSessionId = appSessionId;
            this.ProposedSignature = proposedSignature;
            this.ApprovedSignature = approvedSignature;
            this.CommittedSignature = committedSignature;
        }
        
        /// <summary>
        /// Gets or Sets AgreementId
        /// </summary>
        [DataMember(Name="agreementId", EmitDefaultValue=false)]
        public string AgreementId { get; set; }

        /// <summary>
        /// Gets or Sets Demand
        /// </summary>
        [DataMember(Name="demand", EmitDefaultValue=false)]
        public Demand Demand { get; set; }

        /// <summary>
        /// Gets or Sets Offer
        /// </summary>
        [DataMember(Name="offer", EmitDefaultValue=false)]
        public Offer Offer { get; set; }

        /// <summary>
        /// End of validity period.  Agreement needs to be approved, rejected or cancelled before this date; otherwise will expire. 
        /// </summary>
        /// <value>End of validity period.  Agreement needs to be approved, rejected or cancelled before this date; otherwise will expire. </value>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public DateTime ValidTo { get; set; }

        /// <summary>
        /// Agreement approval timestamp
        /// </summary>
        /// <value>Agreement approval timestamp</value>
        [DataMember(Name="approvedDate", EmitDefaultValue=false)]
        public DateTime ApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// A correlation/session identifier used for querying events related to an action where this appSessionId has been specified. 
        /// </summary>
        /// <value>A correlation/session identifier used for querying events related to an action where this appSessionId has been specified. </value>
        [DataMember(Name="appSessionId", EmitDefaultValue=false)]
        public string AppSessionId { get; set; }

        /// <summary>
        /// Gets or Sets ProposedSignature
        /// </summary>
        [DataMember(Name="proposedSignature", EmitDefaultValue=false)]
        public string ProposedSignature { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedSignature
        /// </summary>
        [DataMember(Name="approvedSignature", EmitDefaultValue=false)]
        public string ApprovedSignature { get; set; }

        /// <summary>
        /// Gets or Sets CommittedSignature
        /// </summary>
        [DataMember(Name="committedSignature", EmitDefaultValue=false)]
        public string CommittedSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Agreement {\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  Offer: ").Append(Offer).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AppSessionId: ").Append(AppSessionId).Append("\n");
            sb.Append("  ProposedSignature: ").Append(ProposedSignature).Append("\n");
            sb.Append("  ApprovedSignature: ").Append(ApprovedSignature).Append("\n");
            sb.Append("  CommittedSignature: ").Append(CommittedSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Agreement);
        }

        /// <summary>
        /// Returns true if Agreement instances are equal
        /// </summary>
        /// <param name="input">Instance of Agreement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Agreement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.Demand == input.Demand ||
                    (this.Demand != null &&
                    this.Demand.Equals(input.Demand))
                ) && 
                (
                    this.Offer == input.Offer ||
                    (this.Offer != null &&
                    this.Offer.Equals(input.Offer))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.ApprovedDate == input.ApprovedDate ||
                    (this.ApprovedDate != null &&
                    this.ApprovedDate.Equals(input.ApprovedDate))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.AppSessionId == input.AppSessionId ||
                    (this.AppSessionId != null &&
                    this.AppSessionId.Equals(input.AppSessionId))
                ) && 
                (
                    this.ProposedSignature == input.ProposedSignature ||
                    (this.ProposedSignature != null &&
                    this.ProposedSignature.Equals(input.ProposedSignature))
                ) && 
                (
                    this.ApprovedSignature == input.ApprovedSignature ||
                    (this.ApprovedSignature != null &&
                    this.ApprovedSignature.Equals(input.ApprovedSignature))
                ) && 
                (
                    this.CommittedSignature == input.CommittedSignature ||
                    (this.CommittedSignature != null &&
                    this.CommittedSignature.Equals(input.CommittedSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgreementId != null)
                    hashCode = hashCode * 59 + this.AgreementId.GetHashCode();
                if (this.Demand != null)
                    hashCode = hashCode * 59 + this.Demand.GetHashCode();
                if (this.Offer != null)
                    hashCode = hashCode * 59 + this.Offer.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                if (this.ApprovedDate != null)
                    hashCode = hashCode * 59 + this.ApprovedDate.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.AppSessionId != null)
                    hashCode = hashCode * 59 + this.AppSessionId.GetHashCode();
                if (this.ProposedSignature != null)
                    hashCode = hashCode * 59 + this.ProposedSignature.GetHashCode();
                if (this.ApprovedSignature != null)
                    hashCode = hashCode * 59 + this.ApprovedSignature.GetHashCode();
                if (this.CommittedSignature != null)
                    hashCode = hashCode * 59 + this.CommittedSignature.GetHashCode();
                return hashCode;
            }
        }

    }

}

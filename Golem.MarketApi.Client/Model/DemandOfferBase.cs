/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Golem.MarketApi.Client.Client.OpenAPIDateConverter;

namespace Golem.MarketApi.Client.Model
{
    /// <summary>
    /// DemandOfferBase
    /// </summary>
    [DataContract]
    public partial class DemandOfferBase :  IEquatable<DemandOfferBase>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DemandOfferBase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DemandOfferBase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DemandOfferBase" /> class.
        /// </summary>
        /// <param name="properties">The object which includes all the Demand/Offer/Proposal properties. This is a JSON object in \&quot;flat convention\&quot; - where keys are full property names and their values indicate properties.  The value&#39;s Javascript type shall conform with the type of the property (as indicated in Golem Standards). ### Example property object: &#x60;&#x60;&#x60; {   \&quot;golem.com.pricing.model\&quot;:\&quot;linear\&quot;,   \&quot;golem.com.pricing.model.linear.coeffs\&quot;:[0.001, 0.002, 0.0],   \&quot;golem.com.scheme\&quot;:\&quot;payu\&quot;,   \&quot;golem.com.scheme.payu.interval_sec\&quot;:6.0,   \&quot;golem.com.usage.vector\&quot;:[\&quot;golem.usage.duration_sec\&quot;,\&quot;golem.usage.cpu_sec\&quot;],   \&quot;golem.inf.cpu.architecture\&quot;:\&quot;x86_64\&quot;,   \&quot;golem.inf.cpu.cores\&quot;:4,   \&quot;golem.inf.cpu.threads\&quot;:7,   \&quot;golem.inf.mem.gib\&quot;:10.612468048930168,   \&quot;golem.inf.storage.gib\&quot;:81.7227783203125,   \&quot;golem.node.debug.subnet\&quot;:\&quot;market-devnet\&quot;,   \&quot;golem.node.id.name\&quot;:\&quot;tworec@mf-market-devnet\&quot;,   \&quot;golem.runtime.name\&quot;:\&quot;vm\&quot;,   \&quot;golem.runtime.version@v\&quot;:\&quot;0.1.0\&quot; } &#x60;&#x60;&#x60;  (required).</param>
        /// <param name="constraints">constraints (required).</param>
        public DemandOfferBase(Object properties = default(Object), string constraints = default(string))
        {
            // to ensure "properties" is required (not null)
            this.Properties = properties ?? throw new ArgumentNullException("properties is a required property for DemandOfferBase and cannot be null");;
            // to ensure "constraints" is required (not null)
            this.Constraints = constraints ?? throw new ArgumentNullException("constraints is a required property for DemandOfferBase and cannot be null");;
        }
        
        /// <summary>
        /// The object which includes all the Demand/Offer/Proposal properties. This is a JSON object in \&quot;flat convention\&quot; - where keys are full property names and their values indicate properties.  The value&#39;s Javascript type shall conform with the type of the property (as indicated in Golem Standards). ### Example property object: &#x60;&#x60;&#x60; {   \&quot;golem.com.pricing.model\&quot;:\&quot;linear\&quot;,   \&quot;golem.com.pricing.model.linear.coeffs\&quot;:[0.001, 0.002, 0.0],   \&quot;golem.com.scheme\&quot;:\&quot;payu\&quot;,   \&quot;golem.com.scheme.payu.interval_sec\&quot;:6.0,   \&quot;golem.com.usage.vector\&quot;:[\&quot;golem.usage.duration_sec\&quot;,\&quot;golem.usage.cpu_sec\&quot;],   \&quot;golem.inf.cpu.architecture\&quot;:\&quot;x86_64\&quot;,   \&quot;golem.inf.cpu.cores\&quot;:4,   \&quot;golem.inf.cpu.threads\&quot;:7,   \&quot;golem.inf.mem.gib\&quot;:10.612468048930168,   \&quot;golem.inf.storage.gib\&quot;:81.7227783203125,   \&quot;golem.node.debug.subnet\&quot;:\&quot;market-devnet\&quot;,   \&quot;golem.node.id.name\&quot;:\&quot;tworec@mf-market-devnet\&quot;,   \&quot;golem.runtime.name\&quot;:\&quot;vm\&quot;,   \&quot;golem.runtime.version@v\&quot;:\&quot;0.1.0\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>The object which includes all the Demand/Offer/Proposal properties. This is a JSON object in \&quot;flat convention\&quot; - where keys are full property names and their values indicate properties.  The value&#39;s Javascript type shall conform with the type of the property (as indicated in Golem Standards). ### Example property object: &#x60;&#x60;&#x60; {   \&quot;golem.com.pricing.model\&quot;:\&quot;linear\&quot;,   \&quot;golem.com.pricing.model.linear.coeffs\&quot;:[0.001, 0.002, 0.0],   \&quot;golem.com.scheme\&quot;:\&quot;payu\&quot;,   \&quot;golem.com.scheme.payu.interval_sec\&quot;:6.0,   \&quot;golem.com.usage.vector\&quot;:[\&quot;golem.usage.duration_sec\&quot;,\&quot;golem.usage.cpu_sec\&quot;],   \&quot;golem.inf.cpu.architecture\&quot;:\&quot;x86_64\&quot;,   \&quot;golem.inf.cpu.cores\&quot;:4,   \&quot;golem.inf.cpu.threads\&quot;:7,   \&quot;golem.inf.mem.gib\&quot;:10.612468048930168,   \&quot;golem.inf.storage.gib\&quot;:81.7227783203125,   \&quot;golem.node.debug.subnet\&quot;:\&quot;market-devnet\&quot;,   \&quot;golem.node.id.name\&quot;:\&quot;tworec@mf-market-devnet\&quot;,   \&quot;golem.runtime.name\&quot;:\&quot;vm\&quot;,   \&quot;golem.runtime.version@v\&quot;:\&quot;0.1.0\&quot; } &#x60;&#x60;&#x60; </value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Object Properties { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public string Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DemandOfferBase {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DemandOfferBase);
        }

        /// <summary>
        /// Returns true if DemandOfferBase instances are equal
        /// </summary>
        /// <param name="input">Instance of DemandOfferBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DemandOfferBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    (this.Constraints != null &&
                    this.Constraints.Equals(input.Constraints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

    }

}

/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Golem.MarketApi.Client.Api;
using Golem.MarketApi.Client.Model;
using Golem.MarketApi.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Golem.MarketApi.Client.Test
{
    /// <summary>
    ///  Class for testing Event
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class EventTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Event
        //private Event instance;

        public EventTests()
        {
            // TODO uncomment below to create an instance of Event
            //instance = new Event();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Event
        /// </summary>
        [Fact]
        public void EventInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Event
            //Assert.IsInstanceOfType<Event> (instance, "variable 'instance' is a Event");
        }

        /// <summary>
        /// Test deserialize a PropertyQueryEvent from type Event
        /// </summary>
        [Fact]
        public void PropertyQueryEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a PropertyQueryEvent from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new PropertyQueryEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ProposalEvent from type Event
        /// </summary>
        [Fact]
        public void ProposalEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ProposalEvent from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new ProposalEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ProposalRejectedEvent from type Event
        /// </summary>
        [Fact]
        public void ProposalRejectedEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ProposalRejectedEvent from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new ProposalRejectedEvent().ToJson()));
        }
        /// <summary>
        /// Test deserialize a AgreementEvent from type Event
        /// </summary>
        [Fact]
        public void AgreementEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a AgreementEvent from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new AgreementEvent().ToJson()));
        }

        /// <summary>
        /// Test the property 'EventType'
        /// </summary>
        [Fact]
        public void EventTypeTest()
        {
            // TODO unit test for the property 'EventType'
        }
        /// <summary>
        /// Test the property 'EventDate'
        /// </summary>
        [Fact]
        public void EventDateTest()
        {
            // TODO unit test for the property 'EventDate'
        }

    }

}

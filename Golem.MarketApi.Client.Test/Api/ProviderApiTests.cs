/* 
 * Yagna Market API
 *
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase). 
 *
 * The version of the OpenAPI document: 1.6.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Golem.MarketApi.Client.Client;
using Golem.MarketApi.Client.Api;
using Golem.MarketApi.Client.Model;

namespace Golem.MarketApi.Client.Test
{
    /// <summary>
    ///  Class for testing ProviderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProviderApiTests : IDisposable
    {
        private ProviderApi instance;

        public ProviderApiTests()
        {
            instance = new ProviderApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProviderApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProviderApi
            //Assert.IsType(typeof(ProviderApi), instance, "instance is a ProviderApi");
        }

        
        /// <summary>
        /// Test ApproveAgreement
        /// </summary>
        [Fact]
        public void ApproveAgreementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agreementId = null;
            //string appSessionId = null;
            //float? timeout = null;
            //instance.ApproveAgreement(agreementId, appSessionId, timeout);
            
        }
        
        /// <summary>
        /// Test CollectAgreementEvents
        /// </summary>
        [Fact]
        public void CollectAgreementEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //float? timeout = null;
            //DateTime? afterTimestamp = null;
            //int? maxEvents = null;
            //string appSessionId = null;
            //var response = instance.CollectAgreementEvents(timeout, afterTimestamp, maxEvents, appSessionId);
            //Assert.IsType<List<AgreementEvent>> (response, "response is List<AgreementEvent>");
        }
        
        /// <summary>
        /// Test CollectDemands
        /// </summary>
        [Fact]
        public void CollectDemandsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //float? timeout = null;
            //int? maxEvents = null;
            //var response = instance.CollectDemands(subscriptionId, timeout, maxEvents);
            //Assert.IsType<List<Event>> (response, "response is List<Event>");
        }
        
        /// <summary>
        /// Test CounterProposalOffer
        /// </summary>
        [Fact]
        public void CounterProposalOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //string proposalId = null;
            //DemandOfferBase demandOfferBase = null;
            //var response = instance.CounterProposalOffer(subscriptionId, proposalId, demandOfferBase);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetAgreement
        /// </summary>
        [Fact]
        public void GetAgreementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agreementId = null;
            //var response = instance.GetAgreement(agreementId);
            //Assert.IsType<Agreement> (response, "response is Agreement");
        }
        
        /// <summary>
        /// Test GetOffers
        /// </summary>
        [Fact]
        public void GetOffersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOffers();
            //Assert.IsType<List<Offer>> (response, "response is List<Offer>");
        }
        
        /// <summary>
        /// Test GetProposalDemand
        /// </summary>
        [Fact]
        public void GetProposalDemandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //string proposalId = null;
            //var response = instance.GetProposalDemand(subscriptionId, proposalId);
            //Assert.IsType<Proposal> (response, "response is Proposal");
        }
        
        /// <summary>
        /// Test QueryReplyOffers
        /// </summary>
        [Fact]
        public void QueryReplyOffersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //string queryId = null;
            //Object body = null;
            //instance.QueryReplyOffers(subscriptionId, queryId, body);
            
        }
        
        /// <summary>
        /// Test RejectAgreement
        /// </summary>
        [Fact]
        public void RejectAgreementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agreementId = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RejectAgreement(agreementId, requestBody);
            
        }
        
        /// <summary>
        /// Test RejectProposalDemand
        /// </summary>
        [Fact]
        public void RejectProposalDemandTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //string proposalId = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.RejectProposalDemand(subscriptionId, proposalId, requestBody);
            
        }
        
        /// <summary>
        /// Test SubscribeOffer
        /// </summary>
        [Fact]
        public void SubscribeOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DemandOfferBase demandOfferBase = null;
            //var response = instance.SubscribeOffer(demandOfferBase);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test TerminateAgreement
        /// </summary>
        [Fact]
        public void TerminateAgreementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agreementId = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.TerminateAgreement(agreementId, requestBody);
            
        }
        
        /// <summary>
        /// Test UnsubscribeOffer
        /// </summary>
        [Fact]
        public void UnsubscribeOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subscriptionId = null;
            //instance.UnsubscribeOffer(subscriptionId);
            
        }
        
    }

}
